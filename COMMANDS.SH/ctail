#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} -<n> <file>
	          ${0##*/} <n> <file>
	          ${0##*/} -<n>c <file>
	Version : Sat Jun 20 23:55:37 JST 2015
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands)
__USAGE
  exit 1
}
# the alternative of the "mktemp -t"
mktempf0() {
  # --- parameters, etc. ---------------------------------------------
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  LF=$(printf '\\\n_');LF=${LF%_}
  # --- call built-in mktemp if exists -------------------------------
  type mktemp >/dev/null 2>&1 && {
    mktemp -t tmp.${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory ----------------------------------
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop --------------------------------------------------
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string -------------------------------------
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"$LF"'/g'             |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path ---------------------------------------
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file --------------------------------------------
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file ---------------
  case "$n" in -1) return 1;; esac
  # --- print the path of the file -----------------------------------
  printf '%s\n' "$Path_target"
  # --- return successfully ------------------------------------------
  return 0
}


# initialize
set -u
umask 0022
PATH='/usr/bin:/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LANG=C LC_ALL=C PATH
copt=0
n=0
file=''
use_stdin=0

# parse arguments and count lines
[ $# -gt 0 ] || print_usage_and_exit
if   printf '%s\n' "$1" | grep -q '^-[0-9]\{1,\}$' ; then
  n=${1#-}
  shift
elif printf '%s\n' "$1" | grep -q '^[0-9]\{1,\}$'  ; then
  n=$1
  shift
elif printf '%s\n' "$1" | grep -q '^-[0-9]\{1,\}c$'; then
  n=${1#-}; n=${n%c}
  copt=1
  shift
else
  print_usage_and_exit
fi
if   [ $# -eq 0 ]; then
  file='-'
elif [ $# -eq 1 ]; then
  file=$1
else
  print_usage_and_exit
fi
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac

# Is the file a normal file?
is_normalfile=0
if   [ -f "$file"                         ]; then
  is_normalfile=1
elif [ "_$file" = '_-'                    ]; then
  is_normalfile=0
elif [ \( -c "$arg" \) -o \( -p "$arg" \) ]; then
  is_normalfile=0
else
  printf '%s\n' "${0##*/}: Invalid file" 1>&2
  exit 1
fi
if [ $is_normalfile -eq 0 ]; then
  tmpfile=$(mktempf0)
  if [ $? -eq 0 ]; then
    trap "rm -f $tmpfile; exit"  EXIT HUP INT QUIT PIPE ALRM TERM
  else
    printf '%s\n' "${0##*/}: Cannot create a temporary file" 1>&2
    exit 1
  fi
  cat "$file" > $tmpfile
  file=$tmpfile
fi

# count and cut the tail
if [ $copt -eq 0 ]; then
  lines=$(sed -n '$=' < "$file")
  [ -z $lines ] && lines=0
  if [ $lines -le $n ]; then
    :
  else
    head -n $((lines-n)) "$file"
  fi
else
  size=$(ls -l "$file" | awk '{print $5}')
  if [ $size -le $n ]; then
    :
    exit 0
  else
    dd if="$file" count=1 bs=$((size-n)) 2>/dev/null
    exit $?
  fi
fi
