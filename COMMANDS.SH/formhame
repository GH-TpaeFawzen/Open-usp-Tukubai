#!/bin/sh

######################################################################
#
# FORMHAME - Insert Value Strings into The HTML Form Properly
#
# USAGE: formhame [options] <html_template> <data_file>
#
#        <html_template> HTML file you want to replace values
#        <data_file> ... Text file which has "Name-Format" data
#        -s<c> ......... Replaces every <c> character which <data_file>
#                        has on value field into white space (" ") 
#                        of strings with <c>. But backslash escaped
#                        one (\<c>) will be guarded as it is. (\<c>)
#        -e ............ Disable the backslash guard of the "-s<c>"
#                        So, \<c> will be substituted with <c>
#        -n<string> .... Treat the strings in <data_file> which are
#                        completely the same as <string> as null
#        --form <name>   Restrict the applying tags to the area which
#                        is enclosed between the form tag whose name
#                        property is <name>
#        -d, -i ........ Obsolete names and work equivalently as
#                        -s, -n respectively
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2017-11-10
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options] <html_template> <data_file>
	Args    : <html_template> HTML file you want to replace values
	          <data_file> ... Text file which has "Name-Format" data
	Options : -s<c> ......... Replaces every <c> character which <data_file>
	                          has on value field into white space (" ") 
	                          of strings with <c>. But backslash escaped
	                          one (\<c>) will be guarded as it is. (\<c>)
	          -e ............ Disable the backslash guard of the "-s<c>"
	                          So, \<c> will be substituted with <c>
	          -n<string> .... Treat the strings in <data_file> which are
	                          completely the same as <string> as null
	          --form <name>   Restrict the applying tags to the area which
	                          is enclosed between the form tag whose name
	                          property is <name>
	          -d, -i ........ Obsolete name and work equivalently as
	                          -s, -n respectively
	Version : 2017-11-10 01:26:05 JST
	          Open usp Tukubai (POSIX Bourne Shell/POSIX commands)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
opts=''
opts_is_set=0
opte_is_set=0
optn=''
optf=''
optf_is_set=0
file_tmpl=''
file_data=''
#
# --- get them -------------------------------------------------------
case $# in 0) print_usage_and_exit;; esac
optmode=''
i=0
for arg in "$@"; do
  i=$((i+1))
  if [ $i -eq $# ]; then
    [ -z "$optmode" ] || print_usage_and_exit
    if [ -n "$file_tmpl" ]; then
      file_data=$arg
    else
      file_tmpl=$arg
    fi
    break
  fi
  case "$optmode $arg" in
    ' -e')  opte_is_set=1; continue        ;;
    ' -e'*) opte_is_set=1; arg="-${arg#-e}";;
  esac
  case "$optmode" in
     '') case "$arg" in
           -[sd]*)
             s=$(printf '%s' "${arg#??}_" | dd bs=1 count=2 2>/dev/null)
             opts=${s%?}
             opts_is_set=1
             ;;
           -[ni]*)
             optn=${arg#??}
             ;;
           --form)
             optmode='f'
             ;;
           *)
             file_tmpl=$arg
             ;;
         esac
         ;;
    'f') optf=$arg
         optf_is_set=1
         optmode=''
         ;;
  esac
done

# === Validate the arguments =========================================
[ -n "$file_tmpl"                         ] || print_usage_and_exit
use_stdin=0
if   [ "_$file_tmpl" = '_'                ] ||
     [ "_$file_tmpl" = '_-'               ] ||
     [ "_$file_tmpl" = '_/dev/stdin'      ] ||
     [ "_$file_tmpl" = '_/dev/fd/0'       ] ||
     [ "_$file_tmpl" = '_/proc/self/fd/0' ]  ; then
  use_stdin=$((use_stdin+1))
  file_tmpl='-'
elif [ -f "$file_tmpl"                    ] ||
     [ -c "$file_tmpl"                    ] ||
     [ -p "$file_tmpl"                    ]  ; then
  [ -r "$file_tmpl" ] || error_exit 1 'Cannot open the file: '"$file_tmpl"
  case "$file_tmpl" in /*|./*|../*) :;; *) file_tmpl="./$file_tmpl";; esac
else
  print_usage_and_exit
fi
if   [ "_$file_data"  = '_'                ] ||
     [ "_$file_data"  = '_-'               ] ||
     [ "_$file_data"  = '_/dev/stdin'      ] ||
     [ "_$file_data"  = '_/dev/fd/0'       ] ||
     [ "_$file_data"  = '_/proc/self/fd/0' ]  ; then
  use_stdin=$((use_stdin+1))
  file_data='-'
elif [ -f "$file_data"                     ] ||
     [ -c "$file_data"                     ] ||
     [ -p "$file_data"                     ]  ; then
  [ -r "$file_data" ] || error_exit 1 'Cannot open the file: '"$file_data"
  case "$file_data" in /*|./*|../*) :;; *) file_data="./$file_data";; esac
else
  print_usage_and_exit
fi
[ $use_stdin -gt 1 ] && error_exit 1 'Not allowed to open STDIN more than once'


######################################################################
# Main Routine
######################################################################

export opts opts_is_set opte_is_set optn optf optf_is_set file_tmpl file_data
exec awk '
# ====================================================================
# Main Routine (in AWK script)
# ====================================================================
BEGIN {
  # === Prepare ======================================================
  OFS=""; ORS="";
  file_t     =ENVIRON["file_tmpl"  ]   ;
  file_d     =ENVIRON["file_data"  ]   ;
  opts       =ENVIRON["opts"       ] "";
  opts_is_set=ENVIRON["opts_is_set"]+ 0;
  opte_is_set=ENVIRON["opte_is_set"]+ 0;
  optn       =ENVIRON["optn"       ] "";
  optf       =ENVIRON["optf"       ] "";
  optf_is_set=ENVIRON["optf_is_set"]+ 0;

  for (i=0; i<256; i++) {s=sprintf("%c",i);esc[s]=s;}
  esc["n" ]="\n"  ; esc["r" ]="\r"  ; esc["t" ]="\t"  ; esc["\\"]="\\"  ;
 #esc["a" ]="\007"; esc["b" ]="\010"; esc["f" ]="\014"; esc["v" ]="\013";
  esc[""  ]="\\"  ;
  if (opts_is_set) {esc[opts]=((opte_is_set)?"":"\\") opts;}

  # === Remember the names and its values ============================
  split("", name_list); # "name" string list for <form>
  split("", nameval  ); # ("name" str.)+FS+(its value) list
                        # * "nameval" is useful for <select> tags which
                        #   have two or more selected <option>s.
                        #   You can know whether the <option> should be
                        #   had selected="selected" or not by making sure
                        #   that nameval[name FS value] exists.
  while (getline line < file_d) {
    i=index(line, FS);
    if (i<1) {name_list[line]=""; nameval[line FS]="";continue;}
    nam=substr(line,1  ,i-1);
    s  =substr(line,i+1    );
    if (s==optn) {s="";}
    val="";
    for (i=1; i<=length(s); i++) {
      c=substr(s,i,1);
      if      (c=="\042"                  ) {    val=val "&quot;"          ;}
      else if (c=="\047"                  ) {    val=val "&apos;"          ;}
      else if (c=="&"                     ) {    val=val "&amp;"           ;}
      else if (c=="\\"                    ) {i++;val=val esc[substr(s,i,1)];}
      else if ((opts_is_set==1)&&(c==opts)) {    val=val " "               ;}
      else                                  {    val=val c                 ;}
    }
    name_list[nam]=val; nameval[nam FS val]="";
  }

  # === Replacing HTML Form Values ===================================
  tag=""; selnam=""; #    The string is useful for default because that
  frmnam="\042\047"; #<-- is an impossible string as a HTML property value
  if(getline line < file_t){line=line "\n";}
  while (line!="") {
    if        (tag==""        ) {
      # --- out of tag -----------------------------------------------
      print_until_the_start_of_a_tag();
      tag=tolower(str);
    } else if (tag=="!--"     ) {
      # --- in comment area ------------------------------------------
      print_to_the_end_of_comment();
      tag="";
    } else if (tag=="input"   ) {
      # --- in <input> tag -------------------------------------------
      tag_s=""; split("",tag_p); split("",tag_v);
      for (i=1; ; i++) {
        read_strs_to_property_name();
        if (str==">" || str=="/>") {tag_s=tag_s str0 str;break;}
        pro=str; s=tolower(pro);
        if      (s=="type"   ) {pn="t" ;}
        else if (s=="name"   ) {pn="n" ;}
        else if (s=="value"  ) {pn="v" ;}
        else if (s=="checked") {pn="c" ;}
        else                   {pn=i "";}
        tag_s    =tag_s str0 "(" pn ")";
        tag_p[pn]=pro                  ;
        if     (str2=="=\042") {read_str_in_dq();tag_v[pn]=str2 str "\042";}
        else if(str2==""     ) {                 str      =str            ;}
        else if(str2=="=\047") {read_str_in_sq();tag_v[pn]=str2 str "\047";}
        else                   {read_str_in_nq();tag_v[pn]=str2 str       ;}
      }
      if ((! optf_is_set) || (frmnam==optf)) {
        input_tag_hame();
      }
      restore_and_print_the_tag();
      tag="";
    } else if (tag=="option"  ) {
      # --- in <option> tag ------------------------------------------
      tag_s=""; split("",tag_p); split("",tag_v);
      for (i=1; ; i++) {
        read_strs_to_property_name();
        if (str==">" || str=="/>") {tag_s=tag_s str0 str;break;}
        pro=str; s=tolower(pro);
        if      (s=="value"   ) {pn="v" ;}
        else if (s=="selected") {pn="s" ;}
        else                    {pn=i "";}
        tag_s    =tag_s str0 "(" pn ")";
        tag_p[pn]=pro                  ;
        if     (str2=="=\042") {read_str_in_dq();tag_v[pn]=str2 str "\042";}
        else if(str2==""     ) {                 str      =str            ;}
        else if(str2=="=\047") {read_str_in_sq();tag_v[pn]=str2 str "\047";}
        else                   {read_str_in_nq();tag_v[pn]=str2 str       ;}
      }
      # (x). in the case that form is not the target by the --form option
      if ((optf_is_set) && (frmnam!=optf)) {
        restore_and_print_the_tag();
        tag="";
        continue;
      }
      # (a). for <option> tag which has "value" property
      if ("v" in tag_p) {
        option_tag_hame();
        restore_and_print_the_tag();
        tag="";
        continue;
      }
      # (b). for <option> tag which does not have "value" property
      # 1) investigate the value for the option tag
      s_val=""; s_prn="";
      while (line!="") {
        read_until_the_start_of_a_tag();
        tag2=tolower(str);
        if (tag2=="!--"    ) {
          s_val=s_val substr(str0,1,length(str0)-1);
          s_prn=s_prn str0 str;
          read_to_the_end_of_comment();
          s_prn=s_prn str;
          continue;
        }
        if (tag2=="/option") {
          s=str0 str;
          if (match(s,/<[^<]+$/)) {s_val=s_val substr(s,1,RSTART-1);          }
          else                    {print "unexp-err #1\n" | "cat 1>&2";exit 1;}
        } else               {
          s    =str0;
          sub(/<[^<]*$/,"",s);
          s_val=s_val s;
          sub(/^\r?\n[ \t]+/,"",s_val); sub(/\r?\n.*$/,"",s_val);
        }
        s_prn=s_prn str0 str;
        break;
      }
      s=s_val;s_val="";
      while (s!="") {
        i=index(s,"&");
        if(i==0){s_val=s_val s;break;}
        s_val=s_val substr(s,1,i-1); s=substr(s,i);
        if (match(s,/^&([A-Za-z0-9]+|#[0-9]+|#x[0-9A-Fa-f]+);/)) {
          s_val=s_val substr(s,1,RLENGTH); s=substr(s,RLENGTH+1);
        } else                                                   {
          s_val=s_val "&amp;"            ; s=substr(s,2        );
        }
      }
      gsub(/\042/,"&quot;",s_val);
      gsub(/\047/,"&apos;",s_val);
      tag_p["v"]="value";
      tag_v["v"]="=\"" s_val "\"";
      # 2) print the <option> which has been done "HAME"
      option_tag_hame();
      restore_and_print_the_tag();
      # 3) print the string which follows the <option>
      print s_prn;
      #
      tag=tag2;
    } else if (tag=="textarea") {
      # --- in <textarea> tag ----------------------------------------
      tag_s=""; split("",tag_p); split("",tag_v);
      for (i=1; ; i++) {
        read_strs_to_property_name();
        if (str==">" || str=="/>") {tag_s=tag_s str0 str;break;}
        pro=str; s=tolower(pro);
        if      (s=="name"   ) {pn="n" ;}
        else                   {pn=i "";}
        tag_s    =tag_s str0 "(" pn ")";
        tag_p[pn]=pro                  ;
        if     (str2=="=\042") {read_str_in_dq();tag_v[pn]=str2 str "\042";}
        else if(str2==""     ) {                 tag_v[pn]=""             ;}
        else if(str2=="=\047") {read_str_in_sq();tag_v[pn]=str2 str "\047";}
        else                   {read_str_in_nq();tag_v[pn]=str2 str       ;}
        if     (pn=="n"      ) {selnam=str                                ;}
      }
      restore_and_print_the_tag();
      nam=("n" in tag_v)?tag_v["n"]:""; sub(/^=/,"",nam);
      if      (match(nam,/^\042[^\042]*\042$/)) {nam=substr(nam,2,RLENGTH-2);}
      else if (match(nam,/^\047[^\047]*\047$/)) {nam=substr(nam,2,RLENGTH-2);}
      # 0) Skip if the tag has the untreated "name" or the tag is in an
      #    untreated <form> tag
      if ((optf_is_set) && (frmnam!=optf)) {tag="";continue;}
      if (!(nam in name_list)            ) {tag="";continue;}
      # 1) Read abd throw away the former string than </textarea>
      while (line!="") {
        read_until_the_start_of_a_tag();
        tag2=tolower(str);
        if (tag2=="/textarea") {break;}
        str="";
        while (str!=">" && str!="/>") {
          read_strs_to_property_name();
        }
      }
      # 2) print the substitute value
      print "\n",name_list[nam];
      # 3) print the following </textarea> area
      s=str0 str;
      if (match(s,/<[^<]+$/)) {print substr(s,RSTART);                    }
      else                    {print "unexp-err #2\n" | "cat 1>&2";exit 1;}
      #
      tag=tag2;
    } else if (tag=="select"  ) {
      # --- in <select> tag ------------------------------------------
      tag_s=""; split("",tag_p); split("",tag_v); selnam="";
      for (i=1; ; i++) {
        read_strs_to_property_name();
        if (str==">" || str=="/>") {tag_s=tag_s str0 str;break;}
        pro=str; s=tolower(pro);
        if      (s=="name"   ) {pn="n" ;}
        else                   {pn=i "";}
        tag_s    =tag_s str0 "(" pn ")";
        tag_p[pn]=pro                  ;
        if     (str2=="=\042") {read_str_in_dq();tag_v[pn]=str2 str "\042";}
        else if(str2==""     ) {                 tag_v[pn]=""             ;}
        else if(str2=="=\047") {read_str_in_sq();tag_v[pn]=str2 str "\047";}
        else                   {read_str_in_nq();tag_v[pn]=str2 str       ;}
        if     (pn=="n"      ) {selnam=str                                ;}
      }
      restore_and_print_the_tag();
      tag="";
    } else if (tag=="form"    ) {
      # --- in <form> tag --------------------------------------------
      tag_s=""; split("",tag_p); split("",tag_v); frmnam="";
      for (i=1; ; i++) {
        read_strs_to_property_name();
        if (str==">" || str=="/>") {tag_s=tag_s str0 str;break;}
        pro=str; s=tolower(pro);
        if      (s=="name"   ) {pn="n" ;}
        else                   {pn=i "";}
        tag_s    =tag_s str0 "(" pn ")";
        tag_p[pn]=pro                  ;
        if     (str2=="=\042") {read_str_in_dq();tag_v[pn]=str2 str "\042";}
        else if(str2==""     ) {                 tag_v[pn]=""             ;}
        else if(str2=="=\047") {read_str_in_sq();tag_v[pn]=str2 str "\047";}
        else                   {read_str_in_nq();tag_v[pn]=str2 str       ;}
        if     (pn=="n"      ) {frmnam=str                                ;}
      }
      restore_and_print_the_tag();
      tag="";
    } else if (tag=="/form"   ) {
      # --- in </form> tag -------------------------------------------
      frmnam="\042\047";
      while (str!=">") {
        print_for_untreated_tags();
        if        (str=="\042") {
          read_str_in_dq();
          print str,"\042";
        } else if (str=="\047") {
          read_str_in_sq();
          print str,"\047";
        }
      }
      tag="";
    } else                      {
      # --- in any other (untreated) tag -----------------------------
      while (str!=">") {
        print_for_untreated_tags();
        if        (str=="\042") {
          read_str_in_dq();
          print str,"\042";
        } else if (str=="\047") {
          read_str_in_sq();
          print str,"\047";
        }
      }
      tag="";
    }
  }
}


# ====================================================================
# Functions for Retrieving HTML String
# * Global variables "str0", "str", "str2" and "line" will be overwritten
# * The variable "line" must be already loaded any string before calling
#   if available. Or, these functions will finish immediately.
# * These functions also have to loaded any string to "line" if available
#   for the next function.
# ====================================================================

# === Print : the area from anywhere to tagname ======================
# [Action] : * Print the string until the first found tagname
#            * Memorize
#              -> variable "str" ... the first found tagname
#            * Advance the cursor NEXT TO the tagname string
# [Until]  : "(TAGNAME)"
# [Regexp] : /.+<(TAGNAME)/
function print_until_the_start_of_a_tag( step,i) {
  str=""; step=0;
  while (line!="") {
    if        (step==0) {
      i=index(line,"<");
      if (i==0)                            {
        print line;
        line= ""  ;
      } else if (substr(line,i,4)=="<!--") {
        str = "!--"                 ;
        print substr(line,1  ,i) str;
        line= substr(line,i+4  )    ;
        break;
      } else                               {
        print substr(line,1,i);
        line= substr(line,i+1);
        step++;
      }
    } else if (step==1) {
      match(line,/^[ \t\n]+/);
      if (RSTART>0) {
        print substr(line,1        ,RLENGTH);
        line= substr(line,RLENGTH+1        );
      } else        {
        step++;
      }
    } else if (step==2) {
      match(line,/^\/?[^ \t\n>\/]+/);
      if (RSTART>0) {
        str = substr(line,1             ,RLENGTH);
        print str                                ;
        line= substr(line,RSTART+RLENGTH        );
        break;
      } else        {
        # unnamed tag (It is strange, but I accept it)
        break;
      }
    }
    if (line=="") {if(getline line < file_t){line=line "\n";}}
  }
}

# === Read : the area from anywhere to tagname =======================
# [Action] : * Memorize string until the first found tagname
#              -> variable "str0" .. former string than tag
#              -> variable "str" ... tagname
#            * Advance the cursor NEXT TO the tagname string
#            * do not print
# [Until]  : "(TAGNAME)"
# [Regexp] : /.+<(TAGNAME)/
function read_until_the_start_of_a_tag( step,i) {
  str0=""; str=""; step=0;
  while (line!="") {
    if        (step==0) {
      i=index(line,"<");
      if (i==0)                            {
        str0=str0 line;
        line=""       ;
      } else if (substr(line,i,4)=="<!--") {
        str =     "!--"             ;
        str0=str0 substr(line,1  ,i);
        line=     substr(line,i+4  );
        break;
      } else                               {
        str0=str0 substr(line,1  ,i);
        line=     substr(line,i+1  );
        step++;
      }
    } else if (step==1) {
      match(line,/^[ \t\n]+/);
      if (RSTART>0) {
        str0=str0 substr(line,1        ,RLENGTH);
        line=     substr(line,RLENGTH+1        );
      } else        {
        step++;
      }
    } else if (step==2) {
      match(line,/^\/?[^ \t\n>\/]+/);
      if (RSTART>0) {
        str =substr(line,1             ,RLENGTH);
        line=substr(line,RSTART+RLENGTH        );
        break;
      } else        {
        # unnamed tag (It is strange, but I accept it)
        break;
      }
    }
    if (line=="") {if(getline line < file_t){line=line "\n";}}
  }
}

# === Print : comment area ===========================================
# [Action] : * Print
#            * Advance the cursor
#            * do not memorize
# [Until]  : "-->"
# [Regexp] : /(?<=!--)((?!-->).)*-->/
function print_to_the_end_of_comment( i) {
  while (line!="") {
    i=index(line,"-->");
    if (i>0) {print substr(line,1,i+2);line=substr(line,i+3);break;}
    print line;
    if(getline line < file_t){line=line "\n";}
  }
}

# === Read : comment area ============================================
# [Action] : * Memorize string from the current position to the end of
#              comment
#              -> variable "str"
#            * Advance the cursor
#            * do not print
# [Until]  : "-->"
# [Regexp] : /(?<=!--)((?!-->).)*-->/
function read_to_the_end_of_comment( i) {
  str="";
  while (line!="") {
    i=index(line,"-->");
    if (i>0) {str=str substr(line,1,i+2);line=substr(line,i+3);break;}
    str=str line;
    if(getline line < file_t){line=line "\n";}
  }
}

# === Print : Inside of untreated tags ===============================
# [Action] : * Print the string until "(DQ)" or "(SQ)" or ">"
#            * Memorize the last printed character
#              -> variable "str" ... "(DQ)" or "(SQ)" or ">"
#            * Advance the cursor NEXT TO the string
# [Until]  : "(DQ)" or "(SQ)" or ">"
# [Regexp] : /[^(DQ)(SQ)>]*/
function print_for_untreated_tags() {
  while (line!="") {
    match(line,/[\042\047>]/)
    if (RSTART>0) {
      print substr(line,1       ,RSTART);
      str = substr(line,RSTART  ,1     );
      line= substr(line,RSTART+1       );
      break;
    }
    print line;
    if(getline line < file_t){line=line "\n";}
  }
}

# === Read value area (inside string between double quotations) ======
# [Action] : * Memorize the FORMER string THAN the double quotation
#              -> variable "str"
#            * Advance the cursor NEXT TO the double quotation
#            * do not print
# [Until]  : "(DQ)"
# [Regexp] : /(?<=")(VALUE)(?=")/
function read_str_in_dq( i) {
  str="";
  while (line!="") {
    i=index(line,"\042");
    if (i>0) {
      str =str substr(line,1  ,i-1);
      line=    substr(line,i+1    );
      match(line,/[ \t\n\/>]+/);
      if      (RSTART==1) {                                           break;}
      else if (RSTART >1) {line=substr(line,RSTART);                  break;}
      else                {if(getline line < file_t){line=line "\n";} break;}
    } else   {
      str =str line;
      if(getline line < file_t){line=line "\n";}
    }
  }
}

# === Read : value area (inside string between single quotations) ====
# [Action] : * Memorize the FORMER string THAN the single quotation
#              -> variable "str"
#            * Advance the cursor NEXT TO the single quotation
#            * do not print
# [Until]  : "(SQ)"
# [Regexp] : /(?<=(SQ))(VALUE)(?=(SQ))/
function read_str_in_sq( i) {
  str="";
  while (line!="") {
    i=index(line,"\047");
    if (i>0) {
      str =str substr(line,1  ,i-1);
      line=    substr(line,i+1    );
      match(line,/[ \t\n\/>]+/);
      if      (RSTART==1) {                                           break;}
      else if (RSTART >1) {line=substr(line,RSTART);                  break;}
      else                {if(getline line < file_t){line=line "\n";} break;}
    } else   {
      str =str line;
      if(getline line < file_t){line=line "\n";}
    }
  }
}

# === Read : value area (inside string between single quotations) ====
# [Action] : * Memorize the string "[^[:space:]]+"
#              -> variable "str"
#            * Advance the cursor NEXT TO "[^[:space:]]+"
#            * do not print
# [Until]  : "[^[:space:]]+"
# [Regexp] : /(?<==)(VALUE)/
function read_str_in_nq() {
  str="";
  if (match(line,/^[^ \t\n\/>]+/)) {
    str =str substr(line,1        ,RLENGTH);
    line=    substr(line,RLENGTH+1        );
  }
}

# === Read : the property name area and its pre-string ===============
# [Action] : * Memorize the first found property name or the end of tag
#              -> variable "str0" ... string before the property string
#                          "str" .... property string or end of tag ("/>",">")
#                          "str2" ... "=(DQ)" or "=(SQ)" or "=" if exists
#            * Advance the cursor NEXT TO the string
#            * do not print
# [Until]  : "(PROPERTY)" or ">"
# [Regexp] : /([[:space:]]*)(PROPERTY)(=[(DQ)(SQ)]?)?/
function read_strs_to_property_name( step,i) {
  step=0; str0="";str="";str2="";
# if (line=="") {if(getline line < file_t){line=line "\n";}else{exit;}}
  while (line!="") {
    if        (step==0) {
      match(line,/^[ \t\n]+/);
      if (RSTART>0) {
        str0=str0 substr(line,1        ,RLENGTH);
        line=     substr(line,RLENGTH+1        );
      } else         {
        step++;
      }
    } else if (step==1) {
      if        (match(line,/^\/?>/)         ) {
        str =substr(line,1        ,RLENGTH);
        line=substr(line,RLENGTH+1        );
        break;
      } else if (substr(line,1,1)=="="       ) {
        step++;
      } else if (match(line,/^[^ \t\n=>\/]+/)) {
        str =substr(line,1        ,RLENGTH);
        line=substr(line,RLENGTH+1        );
        step++;
      }
      # step2
      if (match(line,/^=[\042\047]?/)) {
        str2=substr(line,1        ,RLENGTH);
        line=substr(line,RLENGTH+1        );
      }
      break;
    } else              {
      print "unexp-err #3\n" | "cat 1>&2";
      exit 1;
    }
    if (line=="") {if(getline line < file_t){line=line "\n";}}
  }
}

# ====================================================================
# Functions for Restoring and Printing
# ====================================================================

# === Read /([[:space:]]*)(PROPERTY)(=[(DQ)(SQ)]?)?/ =================
# [in]  : Global var. "tag_s" .. property items layout strings
#                                tag_s="  (1) (2)>" when <foo  a="b" c="d">
#                     "tag_p" .. array which contains property strings
#                                tag_p[1]="a=\"b\"" when the above tag
#                     "tag_v" .. array which contains value strings
#                                tag_v[1]="=\"b\"" when the above tag
# [out] : Stdout ............... Restored tag (without tagname part)
function restore_and_print_the_tag( str,pn,s1,s2) {
  str=tag_s;
  while (str!="") {
    if (match(str,/\([0-9a-z]+\)/)) {
      pn =  substr(str,RSTART+1      ,RLENGTH-2) ""                 ;
      s1=(pn in tag_p)?tag_p[pn]:""; s2=(pn in tag_v)?tag_v[pn]:""  ;
      print substr(str,1             ,RSTART -1) s1 s2              ;
      str=  substr(str,RSTART+RLENGTH          )                    ;
    } else                          {
      print str;
      str=  "" ;
    }
  }
}

# ====================================================================
# Functions of HAME
# ====================================================================

# === Do "HAME" for <input> ==========================================
# [in/out] : Global Variabes (edit strings in these for doing "HAME")
#              "tag_s" ... property items layout strings
#                          tag_s="  (1) (2)/>" when <foo  a="b" c="d"/>
#              "tag_p" ... array which contains property strings
#                          tag_p[1]="a=\"b\"" when the above tag
#              "tag_v" ... array which contains value strings
#                          tag_v[1]="=\"b\"" when the above tag
function input_tag_hame( typ,nam,val,s) {
  typ=("t" in tag_v)?tolower(tag_v["t"]):""; sub(/^=/,"",typ);
  if      (match(typ,/^\042[^\042]*\042$/)) {typ=substr(typ,2,RLENGTH-2);}
  else if (match(typ,/^\047[^\047]*\047$/)) {typ=substr(typ,2,RLENGTH-2);}
  nam=("n" in tag_v)?        tag_v["n"] :""; sub(/^=/,"",nam);
  if      (match(nam,/^\042[^\042]*\042$/)) {nam=substr(nam,2,RLENGTH-2);}
  else if (match(nam,/^\047[^\047]*\047$/)) {nam=substr(nam,2,RLENGTH-2);}
  if (!(nam in name_list)) {return tag_s;}
  if (typ=="radio" || typ=="checkbox") {
    if (!("v" in tag_v)) {return tag_s;}
    val=tag_v["v"]; sub(/^=/,"",val);
    if      (match(val,/^\042[^\042]*\042$/)) {val=substr(val,2,RLENGTH-2);}
    else if (match(val,/^\047[^\047]*\047$/)) {val=substr(val,2,RLENGTH-2);}
    if (val==""            ) {return tag_s;}
    s  =nam FS val;
    if        ((  s in nameval ) && (!("c" in tag_p))) {
      if (match(tag_s,/[ \t\n]*\/?>$/)) {
        tag_p["c"]="checked"     ;
        tag_v["c"]="=\"checked\"";
        tag_s     =substr(tag_s,1,RSTART-1) " (c)" substr(tag_s,RSTART);
      } else                            {
        print "unexp-err #4\n" | "cat 1>&2";
        exit 1;
      }
    } else if ((!(s in nameval)) && (  "c" in tag_p )) {
      gsub(/[ \t\n]+\(c\)/,"",tag_s);
      delete tag_p["c"];
      delete tag_v["c"];
    }
  } else                               {
    tag_v["v"]="=\"" name_list[nam] "\"";
    if (!("v" in tag_p)) {
      tag_p["v"]="value";
      if (match(tag_s,/[ \t\n]*\/?>$/)) {
        tag_s=substr(tag_s,1,RSTART-1) " (v)" substr(tag_s,RSTART);
      } else                            {
        print "unexp-err #5\n" | "cat 1>&2";
        exit 1;
      }
    }
  }
  return tag_s;
}

# === Do "HAME" for <option> =========================================
# [in/out] : Global Variabes (edit strings in these for doing "HAME")
#           * Variables are the same as input_tag_hame()
#           * But tag_p and tag_v have to have the "v" item.
#             If it does not still have, you have to prepare a dummy
#             one with the string between <option> and </option>.
function option_tag_hame( val,s) {
  if (!(selnam in name_list)) {return tag_s;}
  if (!("v" in tag_v)       ) {return tag_s;}
  val=tag_v["v"]; sub(/^=/,"",val);
  if      (match(val,/^\042[^\042]*\042$/)) {val=substr(val,2,RLENGTH-2);}
  else if (match(val,/^\047[^\047]*\047$/)) {val=substr(val,2,RLENGTH-2);}
  s  =selnam FS val;
  if        ((  s in nameval ) && (!("s" in tag_p))) {
    if (match(tag_s,/[ \t\n]*\/?>$/)) {
      tag_p["s"]="selected"     ;
      tag_v["s"]="=\"selected\"";
      tag_s     =substr(tag_s,1,RSTART-1) " (s)" substr(tag_s,RSTART);
    } else                            {
      print "unexp-err #6\n" | "cat 1>&2";
      exit 1;
    }
  } else if ((!(s in nameval)) && (  "s" in tag_p )) {
    gsub(/[ \t\n]+\(s\)/,"",tag_s);
    delete tag_p["s"];
    delete tag_v["s"];
  }
  return tag_s;
}
'
