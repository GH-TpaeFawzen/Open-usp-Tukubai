#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [-v] <name> <MIME-file>
	Version : Sun Nov  6 10:40:01 JST 2016
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands)
	        :   * Although GNU AWK produces better performance than the
	        :     other AWKs
__USAGE
  exit 1
}
# the alternative of the which command
PATH='/usr/bin:/bin' which which >/dev/null 2>&1 || {
  which() {
    command -v "$1" 2>/dev/null |
    awk 'match($0,/^\//){print; ok=1;}
         END {if(ok==0){print "which: not found" > "/dev/stderr"; exit 1}}'
  }
}
# the alternative of the "mktemp -t"
mktempf0() {
  # --- parameters, etc. ---------------------------------------------
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  LF=$(printf '\\\n_');LF=${LF%_}
  # --- call built-in mktemp if exists -------------------------------
  type mktemp >/dev/null 2>&1 && {
    mktemp -t tmp.${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory ----------------------------------
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop --------------------------------------------------
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string -------------------------------------
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"$LF"'/g'             |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path ---------------------------------------
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file --------------------------------------------
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file ---------------
  case "$n" in -1) return 1;; esac
  # --- print the path of the file -----------------------------------
  printf '%s\n' "$Path_target"
  # --- return successfully ------------------------------------------
  return 0
}
# decide whether to use the alternative length of AWK or not
if awk 'BEGIN{a[1]=1;b=length(a)}' 2>/dev/null; then
  arlen='length'
else
  arlen='arlen'
fi

# initialize
set -u
umask 0022
PATH='/usr/bin:/bin:/usr/local/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LANG=C LC_ALL=C PATH
name=''
mime_file=''
vopt='#'
novopt=''
binarable_awk=1
nobawk=''
novoptnobawk='#'
tmpfiles=''
make_temp_file () {
  tmpfile=$(mktempf0)
  if [ $? -eq 0 ]; then
    tmpfiles="$tmpfiles $tmpfile"
    trap "rm -f $tmpfiles; exit" EXIT HUP INT QUIT PIPE ALRM TERM
  else
    printf '%s: Cannot create a temporary file\n' "${0##*/}" 1>&2
    exit 1
  fi
}

# parse arguments
[ $# -ge 1 ] || print_usage_and_exit
optmode=''
i=0
for arg in "$@"; do
  i=$((i+1))
  if [ -z "$optmode" ]; then
    case "$arg" in
      -[v]*)
        ret=$(printf '%s\n' "${arg#-}" |
              awk '{
                v = "_";
                opt_str = "";
                for (n=1;n<=length($0);n++) {
                  s = substr($0,n,1);
                  if (s == "v") {
                    v = "v";
                    #opt_str = substr($0,n+1);
                    #break;
                  }
                }
                printf("%s %s",v,opt_str);
              }')
        ret1=${ret%% *}
        ret2=${ret#* }
        if [ "${ret1#*d}" != "$ret1" ]; then
          dopt_is_set=1
          if [ -n "$ret2" ]; then
            dopt=$ret2
          else
            dopt=''
          fi
        fi
        if [ "${ret1#*v}" != "$ret1" ]; then
          vopt=''
          novopt='#'
        fi
        ;;
      *)
        if [ -z "$novopt$name" ]; then
          [ $i -ge $(($#-1)) ] || print_usage_and_exit
          name=$arg
        elif [ -z "$mime_file" ]; then
          [ $i -eq $# ] || print_usage_and_exit
          mime_file=$arg
        else
          print_usage_and_exit
        fi
        ;;
    esac
  else
    print_usage_and_exit
  fi
done
if [ -z "$novopt$name" ]; then
  print_usage_and_exit
fi
if [ -z "$mime_file" ]; then
  mime_file='-'
elif [ \( ! -f "$mime_file"     \) -a \
       \( ! -c "$mime_file"     \) -a \
       \( ! -p "$mime_file"     \) -a \
       \( "_$mime_file" != '_-' \)    ]
then
  print_usage_and_exit
fi
case "$mime_file" in ''|-|/*|./*|../*) :;; *) file="./$mime_file";; esac
if [ \( ! -r "$mime_file" \) -a \( "_$mime_file" != '_-' \) ]; then
  printf '%s: Cannot open the file\n' "${0##*/}" 1>&2
  exit 1
fi

# Does this host have a "binarable" AWK command?
while :; do
  CMD_AWK=$(which gawk 2>/dev/null)
  [ $? -eq 0 ] && break
  CMD_AWK=$(which awk 2>/dev/null)
  [ $($CMD_AWK 'BEGIN{print length("\000")}') -eq 1 ] && break
  binarable_awk=0; break
done
if [ $binarable_awk -eq 0 ]; then
  nobawk='#'
  [ -z "$novopt" ] && novoptnobawk=''
fi

# awk code
awk_code='
# the alternative length function for array variable
function arlen(ar,i,l){for(i in ar){l++;}return l;}

BEGIN {
  RS  = "\n";
  OFS = ""  ;
  ORS = ""  ;
  _assert_exit = 0;

  dlm = "/";

  wantedname = ENVIRON["v1"];
  wantedfile = "";
  if (match(wantedname,/".*"$/)) {
    wantedfile = substr(wantedname, RSTART, RLENGTH);
    wantedname = substr(wantedname, 1, RSTART-1);
  }
  split(wantedname, array, dlm);
  wantedname = "";
  for (i=1; i<='$arlen'(array); i++) {
    s = array[i];
    if (match(array[i], /\[[0-9]+\]$/)) {
      s  = substr(array[i], RSTART+1, RLENGTH-2);
      s *= 1;
      s  = substr(array[i], 1, RSTART) s "]";
    } else {
      s  = array[i] "[1]";
    }
    wantedname = (i == 1) ? s : wantedname dlm s;
  }

  status = 0;             #  0:in-header
                          #  1:in-header(wanted name has found)
                          # 10:in-body(other)
                          # 11:in-body(wanted)

  getline line;
  if (!match(line, /^--/)) {
    _assert_exit = 1;
    exit _assert_exit;
  }
  '$vopt'numofboundaries = 1;
  depth = 0;              # 1 is the top layer
  boundary = substr(line, 3, length(line)-3);
                          # not include the top 2 letters "--" and the tail CR
  down_to_the_child();

  while (getline line) {
    # A. the LF terminated line (not CR+LF)
    #    -> must be in body
    if (! match(line, /\r$/)) {
      if (status == 11) {
        '$novopt$nobawk'print prefix, line;
        '$novopt$nobawk'prefix = "\n";
      }
    # B. the CR+LF terminated and status==11 line
    #    -> must be in body (wanted)
    } else if (status == 11) {
      if (       line == boundstr1[depth]) {
        '$novoptnobawk'print NR;
        '$novopt'exit;
        # transfer to the next header
        status =  0;
        '$vopt'numofboundaries++;
      } else if (line == boundstr2[depth]) {
        '$novoptnobawk'print NR;
        '$novopt'exit;
        up_to_the_parent();
        status = 10;
      } else {
        '$novopt$nobawk'print prefix, substr(line, 1, length(line)-1);
        '$novopt$nobawk'prefix = "\r\n";
      }
    # C. the CR+LF terminated and status==10 line
    #     -> must be in body (not wanted)
    } else if (status == 10) {
      if (       line == boundstr1[depth]) {
        # transfer to the next header
        status = 0;
        '$vopt'numofboundaries++;
      } else if (line == boundstr2[depth]) {
        up_to_the_parent();
      }
    # D. the other CR+LF terminated line
    #    -> must be in header
    } else if (status < 10) {
      line = substr(line, 1, length(line)-1);
      linel = tolower(line)
      # D1. Content-Disposition header
      #     -> gathering the name and filename info
      if (match(linel, /^content-disposition:[  ]*/)) {
        pline  = " " substr(line , RSTART+RLENGTH);
        plinel = " " substr(linel, RSTART+RLENGTH);
        formname = "";
        if (       match(plinel,/[^a-z]name="/     )) {
          formname = substr(pline, RSTART+RLENGTH);
          if (match(formname,/"/    )) {
            formname = substr(formname, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]name='"'"'/ )) {
          formname = substr(pline, RSTART+RLENGTH);
          if (match(formname,/'"'"'/)) {
            formname = substr(formname, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]name=/      )) {
          formname = substr(pline, RSTART+RLENGTH);
          if (match(formname,/[   ]/)) {
            formname = substr(formname, 1, RSTART-1);
          }
        }
        filename = "";
        if (       match(plinel,/[^a-z]filename="/    )) {
          filename = substr(pline, RSTART+RLENGTH);
          if (match(filename,/"/    )) {
            filename = substr(filename, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]filename='"'"'/)) {
          filename = substr(pline, RSTART+RLENGTH);
          if (match(filename,/'"'"'/)) {
            filename = substr(filename, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]filename=/     )) {
          filename = substr(pline, RSTART+RLENGTH);
          if (match(filename,/[   ]/)) {
            filename = substr(filename, 1, RSTART-1);
          }
        }
        if (!index(namebros[depth],dlm formname dlm)) {
          namerept[depth dlm formname] = 0;
          namebros[depth]              = namebros[depth] formname dlm;
        }
        namerept[depth dlm formname]++;
        name[depth] = formname "[" namerept[depth dlm formname] "]";
        if (length(filename)) {
          name[depth] = name[depth] "\"" filename "\"";
        }
        # status=1 when the current name is same as the wanted one
        s = "";
        for (i=1; i<=depth; i++) {
          s = (i==1) ? name[i] : s dlm name[i];
        }
        if (length(wantedfile) > 2) {
          match(s, /\[[0-9]+\]"/);
          s = substr(s, 1, RSTART-1) substr(s, RSTART+RLENGTH-1);
          match(wantedname, /\[[0-9]+\]$/);
          status = (s == substr(wantedname,1,RSTART-1) wantedfile) ? 1 : 0;
        } else {
          if (match(s,/\[[0-9]+\]"/)) {
            s = substr(s, 1, RSTART+RLENGTH-2);
          }
          status = (s == wantedname) ? 1 : 0;
        }
      # D2. Content-Type: (multipart) header
      #     -> down to the child
      } else if (match(linel, /^content-type:[  ]*multipart\/[a-z]+/)) {
        pline  = " " substr(line , RSTART+RLENGTH);
        plinel = " " substr(linel, RSTART+RLENGTH);
        boundary = "";
        if (       match(plinel,/[^a-z]boundary="/    )) {
          boundary = substr(pline, RSTART+RLENGTH);
          if (match(boundary,/"/    )) {
            boundary = substr(boundary, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]boundary='"'"'/)) {
          boundary = substr(pline, RSTART+RLENGTH);
          if (match(boundary,/'"'"'/)) {
            boundary = substr(boundary, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]boundary=/     )) {
          boundary = substr(pline, RSTART+RLENGTH);
          if (match(boundary,/[   ]/)) {
            boundary = substr(boundary, 1, RSTART-1);
          }
        }
      # D3. Just CR+LF
      #      -> transfer the status to "in-body"
      } else if (! length(line)) {
        '$novopt'prefix = "";
        status += 10;
        if (length(boundary)) {
          down_to_the_child();
        }
        '$novoptnobawk'if (status==11) {print NR+1, ":";}
        continue;
      }
      # D4. Other headers
      #     -> do nothing
      '$vopt'print numofboundaries, " ", line, "\n";
    }
  }
}
END {
  if (_assert_exit) {
    print "'"${0##*/}"': This is not a MIME data", "\n" > "/dev/stderr";
    exit _assert_exit;
  }
}
function down_to_the_child() {
  # need to preset the variables
  # "depth" as the curret depth, and
  # "boundary" as the name of the child
  depth++;
  namebros[depth]  = dlm;
  boundstr1[depth] = "--" boundary "\r";
  boundstr2[depth] = "--" boundary "--\r";
  boundary         = "";
}
function up_to_the_parent() {
  if (depth in boundstr1) { delete boundstr1[depth]; }
  if (depth in boundstr2) { delete boundstr2[depth]; }
  if (depth in namebros) {
    split(substr(namebros[depth],2,length(namebros[depth])-2), array, dlm);
    for (i=1; i<='$arlen'(array); i++) {
      delete namerept[depth dlm array[i]];
    }
    split("", array);
    s = depth dlm;
    if (s in namerept) { delete namerept[s]; }
  }
  depth--;
}
'

# main #1 (GNU AWK available or -v option)
if [ -n "$novoptnobawk" ]; then
  exec env -i v1="$name" $CMD_AWK "$awk_code" "$mime_file"
  exit $?
fi

# main #2 (GNU AWK unavailable and without -v option)
# (commands should not be run with "exec" because of having to remove tempfiles)
if [ \( "_$mime_file" = '_-' \) -o \
     \( -c "$mime_file"      \) -o \
     \( -p "$mime_file"      \)    ]
then
  make_temp_file
  cat "$mime_file" > "$tmpfile"
  mime_file=$tmpfile
fi
st_ed_linenums=$(env -i v1="$name" $CMD_AWK "$awk_code" "$mime_file")
ret=$?
[ $ret -ne 0 ] && exit $ret
st_linenum=${st_ed_linenums%:*}
ed_linenum=${st_ed_linenums#*:}
if [ -n "$ed_linenum" ]; then
  make_temp_file
  outfile0=$tmpfile
  tail -n +$st_linenum "$mime_file"  |
  head -n $((ed_linenum-st_linenum)) > $outfile0
  ret=$?
  [ $ret -ne 0 ] && exit $ret
  # Cut the tail 2-byte (0x0D,0x0A) of the file
  dd if=$outfile0 bs=1 count=$(ls -l $outfile0 | awk '{print $5-2}') 2>/dev/null
  exit $?
else
  tail -n +$st_linenum "$mime_file"
  exit $?
fi
