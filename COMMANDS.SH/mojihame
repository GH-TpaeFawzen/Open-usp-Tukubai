#!/bin/sh

######################################################################
#
# MOJIHAME - Insert Words In Input Data Into The Template File
#            (Representative)
#
# USAGE: mojihame           [-d[<string>]] <template> <data>
#        mojihame -l<label> [-d[<string>]] <template> <data>
#        mojihame -h<label> [-d[<string>]] <template> <data>
#
#        <template> . Template file should be inserted into
#        <data> ..... Source data file should be inserted
#        -d<string> . Set the symbol string which is regarded as an empty
#                     string. (default: "@")
#                     If "-dNULL" is set and one of the 2nd field string
#                     is "NULL", the macro "%2" will be replaced "" instead
#                     of "NULL".
#        -l<label> .. Change mojihame mode to "line mode" (see below)
#        -h<label> .. Change mojihame mode to "hierarchy mode" (see below)
#
#        * 3 mojihame modes:
#          This command has the following 3 mojihame modes.
#          "plain mode" ..... (default)
#                             Replace all of the macro "%n" in the template
#                             file once. Thus the source data consist of
#                             one line of field group. To do this mode,
#                             "mojihame-p" command will be executed.
#          "line mode" ...... Replace the macro string "%n"s only in the
#                             paragraph which are between the lines <label>
#                             contain. And duplicate the paragraph by the
#                             number of source data lines. To do this mode,
#                             "mojihame-l" command will be executed.
#          "hierarchy mode" . It is the hierarchy supported version of
#                             the "line mode".
#                             Duplicate the paragraph between "<label>-n"
#                             (n is the depth of the hierarchy) and replace
#                             its macro strings "%n" hierarchically. To
#                             do this mode, "mojihame-h" command will be
#                             executed.
#
#        * strings for escaping:
#          The following strings which are in fileds of source data are
#          used for escaping.
#            "_" ........ This letter is used to express the space " ".
#                         For instance, "I_am" will be unescaped to "I am"
#                         when replacing "%n" into it.
#            "\_" ....... This string is used to express the underscore "_".
#                         For instance, "\_ABC" will be unescaped to "_ABC"
#                         when replacing "%n" into it.
#            "\\" ....... This string is used to express the backslash.
#                         For instance, "\\n" will be unescaped to "\n"
#                         when replacing "%n" into it.
#            "@" or <string> which follows "-d" option when the option used
#                         This string is used to express the empty string "".
#                         See -d option for detail.
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2017-04-18
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH)${PATH:+:}${PATH:-}"

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/}           [-d[<string>]] <template> <data>
	        : ${0##*/} -l<label> [-d[<string>]] <template> <data>
	        : ${0##*/} -h<label> [-d[<string>]] <template> <data>
	Args    : <template> . Template file should be inserted into
	          <data> ..... Source data file should be inserted
	Options : -d<string> . Set the symbol string which is regarded as an empty
	                       string. (default: "@")
	                       If "-dNULL" is set and one of the 2nd field string
	                       is "NULL", the macro "%2" will be replaced "" instead
	                       of "NULL".
	          -l<label> .. Change mojihame mode to "line mode"
	          -h<label> .. Change mojihame mode to "hierarchy mode"
	Version : 2017-04-18 15:22:08 JST
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
mode='p' # "p" (default) or "r" or "l" or "h"
label=''
asnull='@'
file_tmpl=''
file_data=''
#
# --- get them -------------------------------------------------------
case $# in 0) print_usage_and_exit;; esac
optmode=''
i=0
for arg in "$@"; do
  i=$((i+1))
  if [ $i -eq $# ]; then
    [ -z "$optmode" ] || print_usage_and_exit
    if [ -n "$file_tmpl" ]; then
      file_data=$arg
    else
      file_tmpl=$arg
    fi
    break
  fi
  if [ -z "$optmode" ]; then
    if   [ "_$arg" =  '_-r'        ]; then
      mode='r'
      label=''
    elif [ "_$arg" != "_${arg#-l}" ]; then
      mode='l'
      label=${arg#-l}
      [ -z "$label" ] && optmode='l'
    elif [ "_$arg" != "_${arg#-h}" ]; then
      mode='h'
      label=${arg#-h}
      [ -z "$label" ] && optmode='h'
    elif [ "_$arg" != "_${arg#-d}" ]; then
      asnull=${arg#-d}
    elif [ $i -eq $(($#-1)) ]; then
      file_tmpl=$arg; continue;
    else
      print_usage_and_exit
    fi
  elif [ "$optmode" = 'l' ] || [ "$optmode" = 'h' ]; then
    label=$arg
    optmode=''
  else
    print_usage_and_exit
  fi
done

# === Validate the arguments =========================================
[ "$mode" = 'l' ] && [ -z "$label" ] && print_usage_and_exit
[ "$mode" = 'h' ] && [ -z "$label" ] && print_usage_and_exit
[ -n "$file_tmpl"                  ] || print_usage_and_exit
[ -n "$file_data"                  ] || file_data='-'
use_stdin=0
for file in "$file_tmpl" "$file_data"; do
  if [ "_$file" = '_-'               ] ||
     [ "_$file" = '_/dev/stdin'      ] ||
     [ "_$file" = '_/dev/fd/0'       ] ||
     [ "_$file" = '_/proc/self/fd/0' ]  ;
  then
    use_stdin=$((use_stdin+1))
  fi
done
[ $use_stdin -le 1 ] || {
  error_exit 1 'STDIN cannot be used for <template> and <data> at the same time'
}
if [ ! -r "$file_tmpl" ] && [ "_$file_tmpl" != '_-' ]; then
  error_exit 1 'Cannot open the template file'
fi
if [ ! -r "$file_data" ] && [ "_$file_data" != '_-' ]; then
  error_exit 1 'Cannot open the data file'
fi
case "$file_tmpl" in ''|-|/*|./*|../*) :;; *) file="./$file_tmpl";; esac
case "$file_data" in ''|-|/*|./*|../*) :;; *) file="./$file_data";; esac


######################################################################
# Main Routine
######################################################################

case $mode in
  p) exec "${0}-p" "-d$asnull" "$file_tmpl" "$file_data";;
  r) exec "${0}-l" "-d$asnull" "$file_tmpl" "$file_data";;
  l) exec "${0}-l" "-l$label" "-d$asnull" "$file_tmpl" "$file_data";;
  h) exec "${0}-h" "-h$label" "-d$asnull" "$file_tmpl" "$file_data";;
esac
