#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [options] <filename> <file>
	        : -d delete the key fields from the output file
	        : -a appending mode
	        : -z output gzipped files
	Version : Mon Jun 15 03:59:44 JST 2015
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands/gzip/UTF-8)
__USAGE
  exit 1
}
# the alternative of the "mktemp -d <dir>"
mktempd1() {
  # --- parameters, etc. ---------------------------------------------
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  LF=$(printf '\\\n_');LF=${LF%_}
  # --- call built-in mktemp if exists -------------------------------
  type mktemp >/dev/null 2>&1 && {
    mktemp -d "$1"
    return $?
  }
  # --- Count the numner of "X" --------------------------------------
  Path_target_base=$(printf '%s' "$1" | sed 's/X*$//')
  num_of_digits=$((${#1}-${#Path_target_base}))
  # --- mktemp loop --------------------------------------------------
  while [ $n -ge 0 ]; do
    case $num_of_digits in
      0) Path_target=$Path_target_base
         n=0
         ;;
      *) # --- Generate Ramdom string --------------------------------
         # calculate the number of words which required
         nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
              bc -l                                       |
              sed 's/\..*$//'                             )
         # make a random hexadecimal digit
         if [ -c /dev/urandom ]; then
           hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
                  od -A n -t x2 -v                              |
                  tr 'abcdef ' 'ABCDEF\n'                       |
                  tr -Cd 0123456789ABCDEF                       )
         else
           hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
                  od -t d4 -A n -v                           |
                  sed 's/[^0-9]\{1,\}/'"$LF"'/g'             |
                  grep '[0-9]'                               |
                  tail -n 42                                 |
                  sed 's/.*\(.\{8\}\)$/\1/g'                 |
                  awk 'BEGIN{a=-2147483648;}                 #
                            {a+=$1;        }                 #
                       END  {                                #
                         srand(a);                           #
                         for(i=0;i<'$nw';i++){               #
                           printf("%02X",int(rand()*65536)); #
                         }                                   #
                       }'                                    )
         fi
         # make a random string from the hexadecimal digit
         s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
             bc                                                       |
             tr -d '\\\n'                                             |
             tr ' ' '\n'                                              |
             awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
                  /[0-9]/{print;                                   }' |
             awk 'BEGIN  {ORS="";                                     #
                          s="'"$chrs"'";                              #
                          for(i=0;i<length(s);i++){                   #
                            c[i]=substr(s,i+1,1);                     #
                          }                        }                  #
                  /[0-9]/{print c[$0*1];           }'                 |
             tail -c $num_of_digits                                   )
         Path_target="$Path_target_base$s"
         ;;
    esac
    # --- Making the file --------------------------------------------
    umask 077
    mkdir "$Path_target" 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file ---------------
  case "$n" in -1) return 1;; esac
  # --- print the path of the file -----------------------------------
  printf '%s\n' "$Path_target"
  # --- return successfully ------------------------------------------
  return 0
}


# initialize
PATH='/usr/bin:/bin:/usr/local/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LANG=C LC_ALL=C PATH
umask 0022
set -u
LF=$(printf '\\\n_'); LF=${LF%_}
aopt='>'
dopt='#'
zopt=0
dir_w=''
file_w=''
file_r=''
#
# [memo] expected behavior
# (a) with neither -a nor -z
#     overwrite to the target files directly
# (b) with -a only
#     append    to the target files directly
# (c) with -z only
#     1) make a temporary directory
#     2) create output files which are not gzipped yet
#     3) gzip and overwrite to the target files
#     4) remove the temporary directory
# (d) with -a and -z
#     1) make a temporary directory
#     2) create output files which are not gzipped yet
#     3) gzip and append to the target files
#     4) remove the temporary directory


# parse arguments
[ $# -ge 1 ] || print_usage_and_exit
i=0
for arg in "$@"; do
  i=$((i+1))
  case "${arg#-}" in
    a)                       aopt='>>'                 ;;
    d)                                  dopt=''        ;;
    z)                                           zopt=1;;
    ad|da)                   aopt='>>'; dopt=''        ;;
    az|za)                   aopt='>>';          zopt=1;;
    dz|zd)                              dopt=''; zopt=1;;
    adz|azd|daz|dza|zad|zda) aopt='>>'; dopt=''; zopt=1;;
    *)
        if   [ -z "$file_w" ]; then
          [ $i -ge $(($#-1)) ] || print_usage_and_exit
          printf '%s' "$arg" | grep -q '%[0-9]\{1,\}' || print_usage_and_exit
          file_w=${arg##*/}
          if   [ "$file_w" = "$arg"     ]; then
            dir_w='./'
          elif [ "$file_w" = "${arg#/}" ]; then
            dir_w='/'
          else
            dir_w="${arg%/*}/"
          fi
        elif [ -z "$file_r" ]; then
          [ $i -eq $# ] || print_usage_and_exit
          file_r=$arg
        else
          print_usage_and_exit
        fi
        ;;
  esac
done
case "$file_w" in '') print_usage_and_exit;; esac
if [ -z "$file_r" ]; then
  file_r='-'
elif [ \( ! -f "$file_r"     \) -a \
       \( ! -c "$file_r"     \) -a \
       \( ! -p "$file_r"     \) -a \
       \( "_$file_r" != '_-' \)    ]
then
  print_usage_and_exit
fi
case "$file_r" in -|/*|./*|../*) :;; *) file="./$file_r";; esac
if [ $zopt -ne 0 ]; then
  type gzip >/dev/null 2>&1
  [ $? -eq 0 ] || {
    printf '%s\n' "${0##*/}: gzip command is required but not found" 1>&2
    exit 1
  }
fi

# make the formula for making filename
file=$(printf '%s' "$file_w"                                                  |
       sed 's/\\/\\\\/g'                                                      |
       sed 's/"/\\"/g'                                                        |
       sed 's/^.*$/"&"/'                                                      |
       sed '/^"/s/%{\([0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g' |
       sed '/^"/s/%{\(NF\(-[0-9]\{1,\}\)\{0,1\}\.[0-9]\{1,\}\.[0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g' |
       sed '/^"/s/%{\([0-9]\{1,\}\.[0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g'         |
       sed '/^"/s/%{\(NF\(-[0-9]\{1,\}\)\{0,1\}\.[0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g' |
       sed '/^"/s/%{\([0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g'                      |
       sed '/^"/s/%{\(NF\(-[0-9]\{1,\}\)\{0,1\}\)}/"'"$LF&$LF"'"/g'           |
       sed '/^"/s/%[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}/"'"$LF&$LF"'"/g'     |
       sed '/^"/s/%NF\(-[0-9]\{1,\}\)\{0,1\}\.[0-9]\{1,\}\.[0-9]\{1,\}/"'"$LF&$LF"'"/g' |
       sed '/^"/s/%[0-9]\{1,\}\.[0-9]\{1,\}/"'"$LF&$LF"'"/g'                  |
       sed '/^"/s/%NF\(-[0-9]\{1,\}\)\{0,1\}\.[0-9]\{1,\}/"'"$LF&$LF"'"/g'    |
       sed '/^"/s/%[0-9]\{1,\}/"'"$LF&$LF"'"/g'                               |
       sed '/^"/s/%NF\(-[0-9]\{1,\}\)\{0,1\}/"'"$LF&$LF"'"/g'                 |
       grep -v '^$'                                                           |
       sed '/^%/s/\([%.-]\)0\{1,\}\([1-9]\)/\1\2/g'                           |
       sed '/^%/s/%\([0-9NF-]*\)\.\([0-9]*\)\.\([0-9]*\)/getsubf($\1,\2,\3)/' |
       sed '/^%/s/%\([0-9NF-]*\)\.\([0-9]*\)/getsubf($\1,\2,-1)/'             |
       sed '/^%/s/%\([0-9NF-]*\)/$\1/'                                        |
       tr '\n' ' '                                                            |
       sed 's/ *$//'                                                          )

# list the fields to watch changing
flds=$(printf '%s' "$file_w"                                               |
       sed 's/^.*$/"&"/'                                                   |
       sed '/^"/s/%{\([0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g' |
       sed '/^"/s/%{\(NF\(-[0-9]\{1,\}\)\{0,1\}\.[0-9]\{1,\}\.[0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g' |
       sed '/^"/s/%{\([0-9]\{1,\}\.[0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g'      |
       sed '/^"/s/%{\(NF\(-[0-9]\{1,\}\)\{0,1\}\.[0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g' |
       sed '/^"/s/%{\([0-9]\{1,\}\)}/"'"$LF%\\1$LF"'"/g'                   |
       sed '/^"/s/%{\(NF\(-[0-9]\{1,\}\)\{0,1\}\)}/"'"$LF%\\1$LF"'"/g'     |
       sed '/^"/s/%[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}/"'"$LF&$LF"'"/g'  |
       sed '/^"/s/%NF\(-[0-9]\{1,\}\)\{0,1\}\.[0-9]\{1,\}\.[0-9]\{1,\}/"'"$LF&$LF"'"/g' |
       sed '/^"/s/%[0-9]\{1,\}\.[0-9]\{1,\}/"'"$LF&$LF"'"/g'               |
       sed '/^"/s/%NF\(-[0-9]\{1,\}\)\{0,1\}\.[0-9]\{1,\}/"'"$LF&$LF"'"/g' |
       sed '/^"/s/%[0-9]\{1,\}/"'"$LF&$LF"'"/g'                            |
       sed '/^"/s/%NF\(-[0-9]\{1,\}\)\{0,1\}/"'"$LF&$LF"'"/g'              |
       grep -E '^%([0-9]+|NF(-[0-9]+)?)(\.[0-9]+(\.[0-9]+)?)?$'            |
       sed 's/\([%.-]\)0\{1,\}\([1-9]\)/\1\2/g'                            |
       sed 's/%\([0-9NF-]*\)\.\([0-9]*\)\.\([0-9]*\)/getsubf($\1,\2,\3)/'  |
       sed 's/%\([0-9NF-]*\)\.\([0-9]*\)/getsubf($\1,\2,-1)/'              |
       sed 's/%\([0-9NF-]*\)/$\1/'                                         |
       sort                                                                |
       uniq                                                                |
       tr '\n' ' '                                                         |
       sed 's/ *$//'                                                       )

# fields to delete when d option is enabled
delf=$(echo "$flds"            |
       sed "s/\\\$/${LF}&/g"   |
       grep '^\$'              |
       sed 's/[^0-9$NF-].*$//' |
       sort                    |
       uniq                    |
       sed 's/.*/&=""/'        |
       tr '\n' ';'             )

#  make the pre-sort rule when "NF" is not contained
sortrule_a='';sortrule_b='';stablesort='';
echo "$flds" | grep -q NF || {
  if echo 1 | sort --stable >/dev/null 2>&1; then
    stablesort='Y'
    sortrule=$(echo "$flds"                   |
               sed "s/\\\$/${LF}&/g"          |
               grep '^\$'                     |
               sed 's/[^0-9$NF-].*$//'        |
               sed 's/^\$//'                  |
               sort -n -u                     |
               awk '{printf("-k %d,%d ",$0);}')
  else
    stablesort='N'
    sortrule=$(echo "$flds"                        |
               sed "s/\\\$/${LF}&/g"               |
               grep '^\$'                          |
               sed 's/[^0-9$NF-].*$//'             |
               sed 's/^\$//'                       |
               sort -n -u                          |
               awk '   {printf("-k %d,%d ",$0+1);} #
                    END{printf("-k 1n,1"       );}')
  fi

}

# make a temporary directory to create files which are not gzipped yet
if [ $zopt -ne 0 ]; then
  tmpdir=$(mktempd1 "$dir_w${0##*/}.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
  if [ $? -eq 0 ]; then
    trap "rm -rf $tmpdir; exit" EXIT HUP INT QUIT PIPE ALRM TERM
  else
    printf '%s\n' "${0##*/}: Cannot create a temporary directory" 1>&2
    exit 1
  fi
  dir_w_final=$dir_w
  dir_w="$tmpdir/"
fi


# main
export dir_w
case "$stablesort$sortrule" in
  '') cat "$file_r"                                                           ;;
  Y*) sort --stable $sortrule "$file_r"                                       ;;
  N*) awk '{print NR,$0}' "$file_r" | sort $sortrule | sed 's/^[0-9]\{1,\} //';;
esac |
awk '
# getsubf (preparation : you must call this before using the "getsubf")
function getsubf_prep() {
  chr_80_1 = sprintf("\200");
  chr_C0_X = sprintf("\300");
  chr_E0_2 = sprintf("\340");
  chr_F0_3 = sprintf("\360");
  chr_F8_4 = sprintf("\370");
  chr_FC_5 = sprintf("\374");
  chr_FE_6 = sprintf("\376");
  chr_K_EF = sprintf("\357");
  chr_K_BD = sprintf("\275");
  chr_K_BE = sprintf("\276");
  chr_K_A0 = sprintf("\240");
  chr_K_C0 = sprintf("\300");
  chr_K_80 = sprintf("\200");
}
# return the substr in accordance with the counting rule of self command
function getsubf(str, startpos, len  ,i,p,l,l2,l3,st,ed) {
  # - "st" is a byte offset (start from 1) which the
  #   "startpos" suggests by the Japanese text position (zenkaku-hankaku;
  #   start from 1)
  # - "ed" is a byte offset + 1 (start from 1) which the
  #   "len" suggests by the Japanese text width (zenkaku-hankaku;
  #   start from 1; -1 means "to the end")
  st = 0;
  ed = 0;
  #
  # - "i" is a byte offset (start from 1) from which the function
  #   will read now
  # - "l" is a Japanese text position (zenkaku-hankaku; start
  #   from 1) of the letter which the function will read
  i = 1;
  p = 1;
  while (i <= length(str)) {
    if (st == 0) {
      if (startpos == p) {
        st = i;
        if (len == -1) {break;}
      } else if (startpos < p) {
        _assert_exit = 1;
        exit _assert_exit;
      }
    }
    l = substr(str, i, 1);
    if        (l < chr_80_1) {i++; p++;
    } else if (l < chr_C0_X) {i++; # invalid UTF-8
    } else if (l < chr_E0_2) {i += 2; p += 2;
    } else if (l < chr_F0_3) {
      if (l == chr_K_EF) {
        l2 = substr(str, i+1, 1);
        if        (l2 == chr_K_BD) {
          l3 = substr(str, i+2, 1);
          if ((l3 >= chr_K_A0) && (l3 <  chr_K_C0)) {p += 1;
          } else                                    {p += 2;}
        } else if (l2 == chr_K_BE) {
          l3 = substr(str, i+2, 1);
          if ((l3 >= chr_K_80) && (l3 <  chr_K_A0)) {p += 1;
          } else                                    {p += 2;}
        } else                     {p += 2;                  }
      } else             {p += 2;                             }
      i   += 3;
    } else if (l < chr_F8_4) {i += 4; p += 2;
    } else if (l < chr_FC_5) {i += 5; p += 2;
    } else if (l < chr_FE_6) {i += 6; p += 2;
    } else                   {i++;                             } # invalid UTF-8
    if (st > 0) {
      if        ((startpos + len) == p) {ed = i ; break;
      } else if (len == 0)              {ed = st; break;
      } else if ((startpos + len) <  p) {_assert_exit = 1; exit _assert_exit;}
    }
  }
  if (st == 0) {_assert_exit = 1; exit _assert_exit;}
  return (ed == 0) ? substr(str,st) : substr(str,st,ed-st);
}

# init
BEGIN {
  getsubf_prep();
  flds_str0 = "'"$(echo "$flds " | tr -Cd ' ')"'";
  dir       = ENVIRON["dir_w"];
  file      = "";
}

# main 1) check fields
{flds_str = '"$flds"';}

# main 2) change file to write when fields has changed
flds_str!=flds_str0 {
  close(file);
  file      = dir '"$file"';
  flds_str0 = flds_str;
}

# main 3) write fields to file
{
  '"$dopt"''$delf'
  '"$dopt"'gsub(/  +/, " ");
  '"$dopt"'sub(/^ +/ , "" );
  '"$dopt"'sub(/ +$/ , "" );
  print '$aopt' file;
}
'
[ $? -eq 0 ] || {
  printf '%s\n' "${0##*/}: Failed to create the output files" 1>&2
  exit 1
}

# gzip and make the final files when the temporary directory exists
if [ -n "${dir_w_final:-}" ]; then
  find "$dir_w" -type f |
  while read plainfile; do
    case $aopt in
      '>')  gzip >  "${dir_w_final}${plainfile##*/}.gz" < "$plainfile";;
      '>>') gzip >> "${dir_w_final}${plainfile##*/}.gz" < "$plainfile";;
      *)    false;;
    esac
    [ $? -eq 0 ] || {
      printf '%s\n' "${0##*/}: Failed to gzip the output files" 1>&2
      exit 1
    }
  done
  [ -n "$tmpdir" ] && rm -rf "$tmpdir"
fi
