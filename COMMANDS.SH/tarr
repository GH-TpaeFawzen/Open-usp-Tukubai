#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
		Usage   : ${0##*/} [-<n>] [-d[<string>]] [num=<n>] <file>
		Version : Fri Dec  4 02:16:02 JST 2015
		        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands/UTF-8)
		        : * multibyte strings will be splitted more quickly
		        :   if GNU AWK is available
__USAGE
  exit 1
}
# the alternative of the which command
PATH='/usr/bin:/bin' which which >/dev/null 2>&1 || {
  which () {
    (
      ans=$(LANG=C LC_ALL=C type "$1" 2>/dev/null) || return $?
      case "$1"   in */*) printf '%s\n' "$1"        ; return;; esac
      case "$ans" in */*) printf '%s\n' "/${ans#*/}"; return;; esac
      printf '%s\n' "$1"
    )
  }
}

# Initialize
set -u
umask 0022
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
while :; do # Does this host have a GNU AWK command?
  PATH='/usr/bin:/bin:/usr/local/bin'
  CMD_AWK=$(which gawk 2>/dev/null)
  [ $? -eq 0 ] && break
  CMD_AWK=awk  ;  break
done
PATH='/usr/bin:/bin'
[ \( "_${LANG-}"   = _ \) -a \( "_${LANG-0}"   = _0 \) ] || LANG0=$LANG
[ \( "_${LC_ALL-}" = _ \) -a \( "_${LC_ALL-0}" = _0 \) ] || LC_ALL0=$LC_ALL
export IFS LANG=C LC_ALL=C PATH

# parse the arguments
n=1
dopt=' '
numopt=0
file=''
n_is_set=0
dopt_is_set=0
numopt_is_set=0
case $# in [!0]*)
  i=0
  for arg in "$@"; do
    i=$((i+1))
    case $arg in
      -[0-9]*)
        printf '%s\n' "${arg#-}" | grep -q '^[0-9]\{1,\}$'
        [ $? -eq 0 ] || print_usage_and_exit
        if [ $n_is_set -eq 0 ]; then
          n=${arg#-}
          n_is_set=1
          continue
        fi
        ;;
      num=[0-9]*)
        printf '%s\n' "${arg#num=}" | grep -q '^[0-9]\{1,\}$'
        [ $? -eq 0 ] || print_usage_and_exit
        if [ $numopt_is_set -eq 0 ]; then
          numopt=${arg#num=}
          numopt_is_set=1
          continue
        fi
        ;;
      -d*)
        if [ $dopt_is_set -eq 0 ]; then
          dopt=${arg#-d}
          dopt_is_set=1
          continue
        fi
        ;;
      -h|--help|--version)
        print_usage_and_exit
        ;;
    esac
    [ $i -eq $# ] || print_usage_and_exit
    file=$arg
  done
  ;;
esac
case "$file" in '') file='-';; esac

# validate the file arguments
[ $n -gt 0 ] || print_usage_and_exit
if [ \( ! -r "$file" \) -a \( "_$file" != '_-' \) ]; then
  printf '%s: Cannot open the file\n' "${0##*/}" 1>&2
  exit 1
fi
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac

# main
if [ \( "_${LANG0-}"   = _ \) -a \( "_${LANG0-0}"   = _0 \) ]; then
  unset LANG
else
  LANG=$LANG0
fi
if [ \( "_${LC_ALL0-}" = _ \) -a \( "_${LC_ALL0-0}" = _0 \) ]; then
  unset LC_ALL
else
  LC_ALL=$LC_ALL0
fi
split_str_by_awkfunc=''; split_str_by_myself='#'
[ -z "$dopt" ]                                             &&
set | grep -E '^(LANG|LC_[A-Z0-9]+)=' | grep -Eiq 'UTF-?8' &&
"$CMD_AWK" 'BEGIN{exit (length("\357\274\221")>1)?0:1;}'   && {
  split_str_by_awkfunc='#';  split_str_by_myself=''
}
export n
export numopt
export dopt
exec "$CMD_AWK" '
BEGIN {
  n   = ENVIRON["n"];
  num = ENVIRON["numopt"];
  d   = ENVIRON["dopt"];
  ORS = "";
}
{
  # ===== make the index string ====================================
  #
  idx = "";
  for (i=1; i<num; i++) {idx = idx $i OFS;}
  if  (i==num         ) {idx = idx $i    ;}

  # ===== TARRing ==================================================
  #
  if (d == FS) {
    # --- case #1 (without -d option) ------------------------------
    # 1) extract
    for (i=1+num; i<=NF; i+=n) {
      for (j=i; (j<i+n)&&(j<=NF);    ) {
        if (length(idx)) {print idx,$j;}
        else             {print     $j;}
        j++;
        break;
      }
      for (   ; (j<i+n)&&(j<=NF); j++) {
                          print OFS $j;
      }
      print "\n";
    }
  } else {
    # --- case #2 (with -d option) ---------------------------------
    # 1) split data fields
    data = $0;
    for (i=1; i<=num; i++) {
      sub(/^[ \t]*[^ \t]+[ \t]+/, "", data);
    }
    '"$split_str_by_awkfunc"'split(data, fld, d);
    '"$split_str_by_myself"'split_into_mbletters(data);
    # 2) extract
    i=1;
    while (i in fld) {
      for (j=i; (j<i+n)&&(j in fld);    ) {
        if (length(idx)) {print idx,fld[j];}
        else             {print     fld[j];}
        j++;
        break;
      }
      for (   ; (j<i+n)&&(j in fld); j++) {
                          print OFS fld[j];
      }
      print "\n";
      i+=n;
    }
  }
}
function split_into_mbletters(str, pos,len,n) {
  split("",fld);
  len = 0;
  n   = 0;
  for (pos = 1; pos<= length(str); pos+=len) {
    n++;
    s=substr(str, pos, 1);
    if      (s < "\200") {len=1;}
    else if (s < "\300") {len=1;}
    else if (s < "\340") {len=2;}
    else if (s < "\360") {len=3;}
    else if (s < "\370") {len=4;}
    else if (s < "\374") {len=5;}
    else if (s < "\376") {len=6;}
    else                 {len=1;}
    fld[n]=substr(str, pos, len);
  }
  return n;
}
' "$file"
