#!/bin/sh

######################################################################
#
# TATEYOKO - Exchange The Line Number And Field Number Of All Values
#            (It looks like a transposed matrix)
#
# USAGE: tateyoko [-d[<string>]] <file>
#
#        <file> ...... Textfile you want to do it. The file must have
#                      whitespace-separated fields. And the number of
#                      fields in each line must be the same.
#        -d<string> .. Dummy string by <string> for pudding lack fields
#                      * With this option, even text files has lines
#                        with different number of columns are accepted.
#                      * "*" will be set as default when <string> is "".
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2017-08-28
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [-d[<string>]] <file>
	Args    : <file> ...... Textfile you want to do it. The file must have
	                        whitespace-separated fields. And the number of
	                        fields in each line must be the same.
	Options : -d<string> .. Dummy string by <string> for pudding lack fields
	                        * With this option, even text files has lines
	                          with different number of columns are accepted.
	                        * "*" will be set as default when <string> is "".
	Version : 2017-08-28 00:25:54 JST
	          Open usp Tukubai (POSIX Bourne Shell/POSIX commands)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
dummy_fldstr=''
file=''
#
# --- get them -------------------------------------------------------
[ $# -gt 0 ] && {
  case "$1" in
    -d*) dummy_fldstr=${1#-d}
         case "$dummy_fldstr" in '') dummy_fldstr='*';; esac
         shift
         ;;
  esac
}
case $# in
  0) file='-'                                                            ;;
  1) ([ -f "$1" ] || [ -c "$1" ] || [ -p "$1" ] || [ "_$1" = '_-' ]) && {
       file="$1"
     }                                                                   ;;
  *) print_usage_and_exit                                                ;;
esac
[ -r "$file" ] || [ "_$file" = '_-' ] || error_exit 1 'Cannot open the file'
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac


######################################################################
# Main Routine
######################################################################

# === Prepare ========================================================
export v0=${0##*/}
export v1=$dummy_fldstr

# === Transpose the textfile =========================================
exec awk '
BEGIN {
  max_nf = 0;
  myname       = ENVIRON["v0"];
  dummy_fldstr = ENVIRON["v1"];
  errmsg       = "There is a line which has a differnt number of fields.";
  _assert_exit = 0;
}

{
  if (NF > max_nf) {
    if ((NR > 1) && (length(dummy_fldstr) == 0)) {
      printf("%s: %s\n", myname, errmsg) | "cat 1>&2";
      _assert_exit = 1;
      exit _assert_exit;
    }
    for (i = max_nf + 1; i <= NF; i++) {
      tred_line[i] = "";
      for (j = 1; j < NR; j++) {
        tred_line[i] = tred_line[i] dummy_fldstr FS;
      }
    }
    max_nf = NF;
  }
  for (i = 1; i <= NF; i++) {
    tred_line[i] = tred_line[i] $i FS;
  }
  if (NF < max_nf) {
    if (length(dummy_fldstr) == 0) {
      printf("%s: %s\n", myname, errmsg) | "cat 1>&2";
      _assert_exit = 1;
      exit _assert_exit;
    }
    for (i = NF + 1; i <= max_nf; i++) {
      tred_line[i] = tred_line[i] dummy_fldstr FS;
    }
  }
}
END {
  if (_assert_exit) {
    exit _assert_exit;
  }
  for (i = 1; i <= max_nf; i++) {
    print substr(tred_line[i], 1, length(tred_line[i]) - length(FS));
  }
}
' "$file"
