#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [-d[<string>]] <file>
	Version : 2017-07-18 00:23:25 JST
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands)
__USAGE
  exit 1
}

# initialize
set -u
umask 0022
PATH='/usr/bin:/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LANG=C LC_ALL=C PATH
dummy_fldstr=''
file=''

# parse the arguments
[ $# -gt 0 ] && {
  case "$1" in
    -d*) dummy_fldstr=${1#-d}
         case "$dummy_fldstr" in '') dummy_fldstr='*';; esac
         shift
         ;;
  esac
}
case $# in
  0) file='-'                                                   ;;
  1) [ \( -f "$1" \) -o \( -c "$1" \) -o \( -p "$1" \) -o \
       \( "_$1" = '_-' \)                                 ] && {
       file="$1"
     }                                                          ;;
  *) print_usage_and_exit                                       ;;
esac
if [ \( ! -r "$file" \) -a \( "_$file" != '_-' \) ]; then
  printf '%s: Cannot open the file\n' "${0##*/}" 1>&2
  exit 1
fi
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac

# transpose the table
export v0=${0##*/}
export v1=$dummy_fldstr
exec awk '
BEGIN {
  max_nf = 0;
  myname       = ENVIRON["v0"];
  dummy_fldstr = ENVIRON["v1"];
  errmsg       = "There is a line which has a differnt number of fields.";
  _assert_exit = 0;
}

{
  if (NF > max_nf) {
    if ((NR > 1) && (length(dummy_fldstr) == 0)) {
      printf("%s: %s\n", myname, errmsg) | "cat 1>&2";
      _assert_exit = 1;
      exit _assert_exit;
    }
    for (i = max_nf + 1; i <= NF; i++) {
      tred_line[i] = "";
      for (j = 1; j < NR; j++) {
        tred_line[i] = tred_line[i] dummy_fldstr FS;
      }
    }
    max_nf = NF;
  }
  for (i = 1; i <= NF; i++) {
    tred_line[i] = tred_line[i] $i FS;
  }
  if (NF < max_nf) {
    if (length(dummy_fldstr) == 0) {
      printf("%s: %s\n", myname, errmsg) | "cat 1>&2";
      _assert_exit = 1;
      exit _assert_exit;
    }
    for (i = NF + 1; i <= max_nf; i++) {
      tred_line[i] = tred_line[i] dummy_fldstr FS;
    }
  }
}
END {
  if (_assert_exit) {
    exit _assert_exit;
  }
  for (i = 1; i <= max_nf; i++) {
    print substr(tred_line[i], 1, length(tred_line[i]) - length(FS));
  }
}
' "$file"
