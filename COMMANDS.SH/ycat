#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [-<n>] <file1> <file2> ...
	Version : Fri Dec  4 16:57:39 JST 2015
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands/UTF-8)
__USAGE
  exit 1
}
# the alternative of the "mktemp -t"
mktempf0() {
  # --- parameters, etc. ---------------------------------------------
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  LF=$(printf '\\\n_');LF=${LF%_}
  # --- call built-in mktemp if exists -------------------------------
  type mktemp >/dev/null 2>&1 && {
    mktemp -t tmp.${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory ----------------------------------
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop --------------------------------------------------
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string -------------------------------------
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"$LF"'/g'             |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path ---------------------------------------
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file --------------------------------------------
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file ---------------
  case "$n" in -1) return 1;; esac
  # --- print the path of the file -----------------------------------
  printf '%s\n' "$Path_target"
  # --- return successfully ------------------------------------------
  return 0
}
# decide whether to use the alternative length of AWK or not
if awk 'BEGIN{a[1]=1;b=length(a)}' 2>/dev/null; then
  arlen='length'
else
  arlen='arlen'
fi


# initialize
set -u
umask 0022
PATH='/usr/bin:/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LANG=C LC_ALL=C PATH
numoption=1
filenames=''
use_stdin=0
tmpfiles=''
hexed_filelist=' '
hexed_filelist_readonce=''
LF=$(printf '\n_'); LF=${LF%_}
pwd=$(pwd); pwd="${pwd%/}/"


# parse arguments
mktemp_instead_of_specialfile () {
  tmpfile=$(mktempf0)
  if [ $? -eq 0 ]; then
    tmpfiles="$tmpfiles $tmpfile"
    trap "rm -f $tmpfiles; exit" EXIT HUP INT QUIT PIPE ALRM TERM
    case "${1:-}" in
      '') cat          > "$tmpfile";;
       *) cat "${1:-}" > "$tmpfile";;
    esac
  else
    printf '%s: Cannot create a temporary file\n' "${0##*/}" 1>&2
    exit 1
  fi
}
case $# in [!0]*)
  i=0
  for arg in "$@"; do
    i=$((i+1))
    case $i in
      1) printf '%s\n' "$arg" | grep -q '^-[0-9]\{1,\}$' && {
           numoption=${arg#-}
           continue
         }
         ;;
    esac
    if [ \( "_$arg" = '_-'               \) -o \
         \( "_$arg" = '_/dev/stdin'      \) -o \
         \( "_$arg" = '_/dev/fd/0'       \) -o \
         \( "_$arg" = '_/proc/self/fd/0' \)    ]
    then
      case $use_stdin in [!0]*) print_usage_and_exit;; esac
      use_stdin=1
      mktemp_instead_of_specialfile
      file=$tmpfile
    elif [ -p "$arg"                          ]; then
      mktemp_instead_of_specialfile "$arg"
      file=$tmpfile
    elif [ \( -f "$arg" \) -o \( -c "$arg" \) ]; then
      str=$(printf '%s' "$arg" |
            od -v -A n -t x1   |
            tr -d ' \n'        )
      if   echo "$hexed_filelist_readonce" | grep -Fq " $str "; then
        printf '%s: Must not be set an irregular file two times\n' "${0##*/}" 1>&2
        exit 1
      elif echo "$hexed_filelist"          | grep -Fq " $str "; then
        tmpfile=$(mktempf0)
        if [ $? -eq 0 ]; then
          tmpfiles="$tmpfiles $tmpfile"
          trap "rm -f $tmpfiles; exit" EXIT HUP INT QUIT PIPE ALRM TERM
          case "$arg" in 
            /*) ln -fs "$arg"     "$tmpfile";;
             *) ln -fs "$pwd$arg" "$tmpfile";;
          esac
        else
          printf '%s: Cannot create a temporary file\n' "${0##*/}" 1>&2
          exit 1
        fi
        file=$tmpfile
      elif [ -f "$arg" ]; then
        hexed_filelist="$hexed_filelist$str "
        file=$arg
      else
        hexed_filelist_readonce="$hexed_filelist_readonce$str "
        file=$arg
      fi
    else
      print_usage_and_exit
    fi
    if [ ! -r "$file" ]; then
      printf '%s: Cannot open the file "%s"\n' "${0##*/}" "$arg" 1>&2
      exit 1
    fi
    case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac
    filenames="$filenames$LF$file"
  done
  ;;
esac
filenames=${filenames#?}
case "$filenames" in
  '') use_stdin=1
      mktemp_instead_of_specialfile
      filenames=$tmpfile
      ;;
esac


# awkcode : get the length of the UTF-8 string (it is not a byte number)
awkcode_func_utf8strlen='
# strlen for UTF-8 (main)
function utf8strlen(str, len,i,l1,l2,l3) {
  len = 0;
  for (i = 1; i <= length(str); i++) {
    len++;
    l1=substr(str, i, 1);
    if        (l1 =="\010") {len-=2;continue;
    } else if (l1 < "\200") {       continue;
    } else if (l1 < "\300") {len--; continue;
    } else if (l1 < "\340") {i++;
    } else if (l1 < "\360") {
      if (l1 == "\357") {
        l2 = substr(str, i+1, 1);
        if (l2 == "\275") {
          l3 = substr(str, i+2, 1);
          if ((l3 >= "\240") && (l3 < "\300")) {len--;}
        } else if (l2 == "\276") {
          l3 = substr(str, i+2, 1);
          if ((l3 >= "\200") && (l3 < "\240")) {len--;}
        }
      }
      i += 2;
    } else if (l1 < "\370") {i += 3;
    } else if (l1 < "\374") {i += 4;
    } else if (l1 < "\376") {i += 5;
    } else                  {len-- ; continue;}
    len++;
  }
  return len;
}
'


# get the maximal widthes of the files
awkcode_main1_get_maxwidthes='
# the alternative length function for array variable
function arlen(ar,i,l){for(i in ar){l++;}return l;}

BEGIN {
  filenames = ENVIRON["v1"];
  split(filenames, filename, "\n");

  for (i = 1; i <= '$arlen'(filename); i++) {
    maxwidth[i] = 0;
    while (getline str < filename[i]) {
      width = utf8strlen(str);
      if (width > maxwidth[i]) {
        maxwidth[i] = width;
      }
    }
    close(filename[i]);
  }

  str = "";
  for (i = 1; i <= '$arlen'(maxwidth); i++) {
    str = str " " maxwidth[i];
  }
  print substr(str, 2, length(str) - 1);
}
'
max_widthes=$(v1=$filenames                                              \
              awk "$awkcode_main1_get_maxwidthes$awkcode_func_utf8strlen")


# ycat
awkcode_main2_ycat='
# the alternative length function for array variable
function arlen(ar,i,l){for(i in ar){l++;}return l;}

BEGIN {
  filenames   = ENVIRON["v1"];
  numoption   = ENVIRON["v2"];
  max_widthes = ENVIRON["v3"];
  split(filenames  , filename , "\n");
  split(max_widthes, max_width      );

  margin = "";
  for (i = 0; i < numoption; i++) {
    margin = margin FS;
  }
  while (1) {
    line = "";
    validlines = 0;
    for (i = 1; i <= '$arlen'(filename); i++) {
      if (length(filename[i])) {
        if (getline str < filename[i]) {
          validlines++;
        } else {
          close(filename[i]);
          filename[i] = "";
          str = "";
        }
      } else {
        str = "";
      }
      padding = "";
      j = max_width[i] - utf8strlen(str);
      if (j > 0) {
        padding = sprintf("%0" j "d", 0);
        gsub("0", " ", padding);
      }
      line = (i == 1) ? str padding : line margin str padding;
    }
    if (validlines) {
      print line;
      continue;
    }
    else {
      break;
    }
  }
}
'
if [ -z "$tmpfiles" ]; then
  exec env -i v1="$filenames" v2="$numoption" v3="$max_widthes" \
       awk "$awkcode_main2_ycat$awkcode_func_utf8strlen"
else
  # (awk should not be run with "exec" because of having to remove tempfiles)
  env -i v1="$filenames" v2="$numoption" v3="$max_widthes" \
  awk "$awkcode_main2_ycat$awkcode_func_utf8strlen"
fi
