#!/bin/sh

######################################################################
#
# ZEN - Converter From "Hankaku" (Japanese Halfwidth) Characters  To
#       "Zenkaku" (Japanese Fullwidth) Characters
#
# USAGE: zen [-k] <file>
#        zen [+<n>h] [-k] <f1> <f2> ... <file>
#        zen -d [-k] <string>
#
#        <fn> .... field number you want to convert (All characters will
#                  be converted when you set no <fn> arguments)
#        <file> .. Text file you want to convert
#        <string>  It will be explained in -d option
#        -d ...... Direct Mode :
#                  It make this command regard the last argument (<string>)
#                  as a field formatted string instead of <file>
#        +<n>h ... Regards the top <n> lines as comment and Print without
#                  converting
#        -k ...... Convert only "Katakana" characters
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-05-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage: ${0##*/} [-k] <file>
	       ${0##*/} [+<n>h] [-k] <f1> <f2> ... <file>
	       ${0##*/} -d [-k] <string>
	Args    : <fn> .... field number you want to convert (All characters will
	                    be converted when you set no <fn> arguments)
	          <file> .. Text file you want to convert
	          <string>  It will be explained in -d option
	Options : -d ...... Direct Mode :
	                    It make this command regard the last argument (<string>)
	                    as a field formatted string instead of <file>
	          +<n>h ... Regards the top <n> lines as comment and Print without
	                    converting
	          -k ...... Convert only "Katakana" characters
	Version : 2020-05-06 22:42:19 JST
	          Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands/UTF-8)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
directmode=0
directstr=''
kanaonly=''
awkc0=''
file=''
fldnums=''
all_fields=0
use_stdin=0
opt_part=1
opth=0
#
# --- get them -------------------------------------------------------
case "$#${1:-}" in 1-h|1-v|1--help|1--version) print_usage_and_exit;; esac
i=0
for arg in ${1+"$@"}; do
  i=$((i+1))
  fldnum=''
  # direct mode processing
  if   [ $opt_part -ne 0 ] && [ "_$arg" = '_-d'        ]; then
    directmode=1
    continue
  elif [ $opt_part -ne 0 ] && [ "_$arg" = '_-dk'       ]; then
    directmode=1
    kanaonly='#'
    continue
  elif [ $opt_part -ne 0 ] && [ "_$arg" = '_-kd'       ]; then
    directmode=1
    kanaonly='#'
    continue
  elif [ $opt_part -ne 0 ] && [ "_$arg" = '_-k'        ]; then
    kanaonly='#'
    continue
  elif [ $opt_part -ne 0 ] && [ "_$arg" != "_${arg#+}" ]; then
    s=$(printf '%s\n' "$arg" | sed 's/^+\([0-9]*\)h$/\1/')
    [ "_$s" != "_$arg" ] || print_usage_and_exit
    [ -z "$s"          ] && { opth=1; continue; }
    opth=$(expr $s + 0)
    continue
  fi
  opt_part=0
  if [ $i -eq $# ] && [ $directmode -ne 0 ]; then
    directstr=$arg
    break
  fi
  # separate arg to arg1, arg2
  arg1=${arg%%/*}
  arg2=${arg##*/}
  if [ "_${arg1}/${arg2}" != "_$arg" ] || [ -z "$arg1" ] || [ -z "$arg2" ]; then
    arg1=$arg
    arg2=''
  fi
  # check both
  j=0
  for s in $arg1 $arg2; do
    if printf '%s\n' "$s" | grep -q '^[0-9]\{1,\}$'; then
      j=$((j+1))
      if [ "$s" -eq 0 ]; then
        all_fields=1
      fi
    elif printf '%s\n' "$s" | grep -Eq '^(NF|NF-[0-9]+)$'; then
      j=$((j+1))
    fi
  done
  if [ $j -eq 2 ] || ([ $j -eq 1 ] && [ -z "$arg2" ]); then
    fldnums="$fldnums $arg"
    continue
  fi
  # perhaps, this argument is a filename
  if [ $# -eq $i ]; then
    file=$arg
    continue
  fi
  # otherwise, it is a invalid argument
  print_usage_and_exit
done
# (if you want to regard no fldnums as all, set all_fields=1 instead of exit)
[ -n "$fldnums" ] || all_fields=1
if [ $directmode -ne 0 ]; then
  [ -n "$directstr" ] || print_usage_and_exit
  file=''
else
  [ -n "$file" ] || file='-'
  case "$file" in
     -|/dev/stdin|/dev/fd/0|/proc/self/fd/0) use_stdin=$((use_stdin+1));;
  esac
  if   [ ! -f "$file"     ] &&
       [ ! -c "$file"     ] &&
       [ ! -p "$file"     ] &&
       [ "_$file" != '_-' ]  ; then
    print_usage_and_exit
  elif [ ! -r "$file" ] && [ "_$file" != '_-' ]; then
    error_exit 1 'Cannot open the file'
  fi
fi
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac


######################################################################
# Prepare for the Main Routine
######################################################################

# === Generate the partial code for AWK ==============================
if [ $all_fields -eq 0 ]; then
  awkc0=$(echo "$fldnums"                           |
          sed 's/^0\{1,\}\([0-9]\)/\1/'             |
          sed 's/\([^0-9]\)0\{1,\}\([0-9]\)/\1\2/g' |
          tr ' ' '\n'                               |
          awk                                       '
            /^NF-[0-9]+\/NF-[0-9]+$/ {
              nfofs1 = substr($0,4,index($0,"/")-4) + 0;
              nfofs2 = substr($0,index($0,"/")+4) + 0;
              if (nfofs1 > nfofs2) {
                i = nfofs1;
                nfofs1 = nfofs2;
                nfofs2 = i;
              }
              for (i=nfofs1; i<=nfofs2; i++) {
                print "0 NF-" i;
              }
            }
            /^NF\/NF-[0-9]+$/ {
              nfofs2 = substr($0,index($0,"/")+4);
              print "0 NF";
              for (i=1; i<=nfofs2; i++) {
                print "0 NF-" i;
              }
            }
            /^NF-[0-9]+\/NF$/ {
              nfofs2 = substr($0,4,index($0,"/")-4) + 0;
              print "0 NF";
              for (i=1; i<=nfofs2; i++) {
                print "0 NF-" i;
              }
            }
            /^[0-9]+\/NF-[0-9]+$/ {
              printf("0 %s NF-%s\n",
                     substr($0,1,index($0,"/")-1),
                     substr($0,index($0,"/")+4)   );
            }
            /^NF-[0-9]+\/[0-9]+$/ {
              printf("0 %s NF-%s\n",
                     substr($0,index($0,"/")+1),
                     substr($0,4,index($0,"/")-4));
            }
            /^[0-9]+\/[0-9]+$/ {
              pos = index($0, "/");
              a = substr($0, 1, pos-1)+0;
              b = substr($0, pos+1)+0;
              if (a > b) {
                swp = a;
                a = b;
                b = swp;
              }
              for (i=a; i<=b; i++) {
                print 1, i;
              }
            }
            /^[0-9]+\/NF$/ {
              print 1, substr($0, 1, length($0)-3), "NF";
            }
            /^NF\/[0-9]+$/ {
              print 1, substr($0, index($0,"/")+1), "NF";
            }
            /^[0-9]+$/ {
              print 1, $0;
            }
            /^NF-[0-9]+$/ {
              print 0, $0;
            }
            (($0 == "NF") || ($0 == "NF/NF")) {
              print 0, "NF";
            }
          '                                         |
          sort -k 1,1 -k 2n,2 -k 3n,3               |
          uniq                                      |
          sed -n '1,/1 [0-9]\{1,\} NF$/p'           |
          awk                                       '
            BEGIN {
              f1_total  = 0;
              f2_max    = 0;
              f3_has_nf = 0;
            }
            {
              f1_total += $1; 
              if ($1 == 1) {
                f2_max = ($2 > f2_max) ? $2 : f2_max;
                f2_vals[$2] = 1;
              }
              f3_has_nf = ($3 == "NF") ? 1 : f3_has_nf;
              cell[NR,1] = $2;
              if (NF == 3) {
                cell[NR,2] = $3;
              }
            }
            END {
              if ((f1_total == NR) && (f3_has_nf)) {
                printf("split(\"\",mark);for(i=1;i<=NF;i++){mark[i]=1}");
                for (i=1; i<f2_max; i++) {
                  if (! (i in f2_vals)) {
                    printf("delete mark[%d];", i);
                  }
                }
              } else {
                printf("split(\"\",mark);");
                for (i=1; i<=NR; i++) {
                  if (i SUBSEP 2 in cell) {
                    printf("if(%s>%s){for(i=%s;i<=%s;i++){mark[i]=1}}else{for(i=%s;i<=%s;i++){mark[i]=1}}",
                           cell[i,1],cell[i,2],
                           cell[i,2],cell[i,1],
                           cell[i,1],cell[i,2]);
                  } else {
                    if (match(cell[i,1],/^[0-9]+$/) || (cell[i,1] == "NF")) {
                      printf("mark[%s]=1;",cell[i,1]);
                    } else {
                      printf("if(%s>0){mark[%s]=1}",cell[i,1],cell[i,1]);
                    }
                  }
                }
              }
              printf("convert_marked_flds();print;");
            }
          '                                         )
  if echo "$awkc0" | grep -q 'NF'; then
    awkc0b=''
  else
    awkc0b=${awkc0%convert_marked_flds*}
    awkc0='convert_marked_flds();print;'
  fi
else
  awkc0='print utf8han2zen($0);'
  awkc0b=''
fi

# === Generate the AWK code for zen operation ========================
awkcode='
BEGIN {
  for (i=0; i<hdr_skip; i++) {
    if (getline line) {
      print line;
    } else {
      exit;
    }
  }
  utf8han2zen_prep();
  '"$awkc0b"'
}
{
  '"$awkc0"'
}
function convert_marked_flds( fld) {
  for (fld in mark) {
    $fld = utf8han2zen($fld);
  }
}
function utf8han2zen_prep() {

  # memorize all of the transforming letters
  h2za[" "]="　";  h2za["!"]="！";  h2za["\""]="”"; h2za["#"]="＃";
  h2za["$"]="＄";  h2za["%"]="％";  h2za["&"]="＆";  h2za["'"'"'"]="’";
  h2za["("]="（";  h2za[")"]="）";  h2za["*"]="＊";  h2za["+"]="＋";
  h2za[","]="，";  h2za["-"]="－";  h2za["."]="．";  h2za["/"]="／";
  h2za["0"]="０";  h2za["1"]="１";  h2za["2"]="２";  h2za["3"]="３";
  h2za["4"]="４";  h2za["5"]="５";  h2za["6"]="６";  h2za["7"]="７";
  h2za["8"]="８";  h2za["9"]="９";  h2za[":"]="：";  h2za[";"]="；";
  h2za["<"]="＜";  h2za["="]="＝";  h2za[">"]="＞";  h2za["?"]="？";
  h2za["@"]="＠";  h2za["A"]="Ａ";  h2za["B"]="Ｂ";  h2za["C"]="Ｃ";
  h2za["D"]="Ｄ";  h2za["E"]="Ｅ";  h2za["F"]="Ｆ";  h2za["G"]="Ｇ";
  h2za["H"]="Ｈ";  h2za["I"]="Ｉ";  h2za["J"]="Ｊ";  h2za["K"]="Ｋ";
  h2za["L"]="Ｌ";  h2za["M"]="Ｍ";  h2za["N"]="Ｎ";  h2za["O"]="Ｏ";
  h2za["P"]="Ｐ";  h2za["Q"]="Ｑ";  h2za["R"]="Ｒ";  h2za["S"]="Ｓ";
  h2za["T"]="Ｔ";  h2za["U"]="Ｕ";  h2za["V"]="Ｖ";  h2za["W"]="Ｗ";
  h2za["X"]="Ｘ";  h2za["Y"]="Ｙ";  h2za["Z"]="Ｚ";  h2za["["]="［";
  h2za["\\"]="＼"; h2za["]"]="］";  h2za["^"]="＾";  h2za["_"]="＿";
  h2za["`"]="‘";  h2za["a"]="ａ";  h2za["b"]="ｂ";  h2za["c"]="ｃ";
  h2za["d"]="ｄ";  h2za["e"]="ｅ";  h2za["f"]="ｆ";  h2za["g"]="ｇ";
  h2za["h"]="ｈ";  h2za["i"]="ｉ";  h2za["j"]="ｊ";  h2za["k"]="ｋ";
  h2za["l"]="ｌ";  h2za["m"]="ｍ";  h2za["n"]="ｎ";  h2za["o"]="ｏ";
  h2za["p"]="ｐ";  h2za["q"]="ｑ";  h2za["r"]="ｒ";  h2za["s"]="ｓ";
  h2za["t"]="ｔ";  h2za["u"]="ｕ";  h2za["v"]="ｖ";  h2za["w"]="ｗ";
  h2za["x"]="ｘ";  h2za["y"]="ｙ";  h2za["z"]="ｚ";  h2za["{"]="｛";
  h2za["|"]="｜";  h2za["}"]="｝";  h2za["~"]="～";
                   h2zk["｡"]="。";  h2zk["｢"]="「";  h2zk["｣"]="」";
  h2zk["､"]="、";  h2zk["･"]="・";  h2zk["ｦ"]="ヲ";  h2zk["ｧ"]="ァ";
  h2zk["ｨ"]="ィ";  h2zk["ｩ"]="ゥ";  h2zk["ｪ"]="ェ";  h2zk["ｫ"]="ォ";
  h2zk["ｬ"]="ャ";  h2zk["ｭ"]="ュ";  h2zk["ｮ"]="ョ";  h2zk["ｯ"]="ッ";
  h2zk["ｰ"]="ー";  h2zk["ｱ"]="ア";  h2zk["ｲ"]="イ";  h2zk["ｳ"]="ウ";
  h2zk["ｴ"]="エ";  h2zk["ｵ"]="オ";  h2zk["ｶ"]="カ";  h2zk["ｷ"]="キ";
  h2zk["ｸ"]="ク";  h2zk["ｹ"]="ケ";  h2zk["ｺ"]="コ";  h2zk["ｻ"]="サ";
  h2zk["ｼ"]="シ";  h2zk["ｽ"]="ス";  h2zk["ｾ"]="セ";  h2zk["ｿ"]="ソ";
  h2zk["ﾀ"]="タ";  h2zk["ﾁ"]="チ";  h2zk["ﾂ"]="ツ";  h2zk["ﾃ"]="テ";
  h2zk["ﾄ"]="ト";  h2zk["ﾅ"]="ナ";  h2zk["ﾆ"]="ニ";  h2zk["ﾇ"]="ヌ";
  h2zk["ﾈ"]="ネ";  h2zk["ﾉ"]="ノ";  h2zk["ﾊ"]="ハ";  h2zk["ﾋ"]="ヒ";
  h2zk["ﾌ"]="フ";  h2zk["ﾍ"]="ヘ";  h2zk["ﾎ"]="ホ";  h2zk["ﾏ"]="マ";
  h2zk["ﾐ"]="ミ";  h2zk["ﾑ"]="ム";  h2zk["ﾒ"]="メ";  h2zk["ﾓ"]="モ";
  h2zk["ﾔ"]="ヤ";  h2zk["ﾕ"]="ユ";  h2zk["ﾖ"]="ヨ";  h2zk["ﾗ"]="ラ";
  h2zk["ﾘ"]="リ";  h2zk["ﾙ"]="ル";  h2zk["ﾚ"]="レ";  h2zk["ﾛ"]="ロ";
  h2zk["ﾜ"]="ワ";  h2zk["ﾝ"]="ン";  h2zk["ﾞ"]="゛";  h2zk["ﾟ"]="゜";
  h2zd["ｶﾞ"]="ガ"; h2zd["ｷﾞ"]="ギ"; h2zd["ｸﾞ"]="グ"; h2zd["ｹﾞ"]="ゲ";
  h2zd["ｺﾞ"]="ゴ"; h2zd["ｻﾞ"]="ザ"; h2zd["ｼﾞ"]="ジ"; h2zd["ｽﾞ"]="ズ";
  h2zd["ｾﾞ"]="ゼ"; h2zd["ｿﾞ"]="ゾ"; h2zd["ﾀﾞ"]="ダ"; h2zd["ﾁﾞ"]="ヂ";
  h2zd["ﾂﾞ"]="ヅ"; h2zd["ﾃﾞ"]="デ"; h2zd["ﾄﾞ"]="ド"; h2zd["ﾊﾞ"]="バ";
  h2zd["ﾋﾞ"]="ビ"; h2zd["ﾌﾞ"]="ブ"; h2zd["ﾍﾞ"]="ベ"; h2zd["ﾎﾞ"]="ボ";
  h2zd["ﾊﾟ"]="パ"; h2zd["ﾋﾟ"]="ピ"; h2zd["ﾌﾟ"]="プ"; h2zd["ﾍﾟ"]="ペ";
  h2zd["ﾎﾟ"]="ポ"; h2zd["ｳﾞ"]="ヴ"; h2zd["ﾜﾞ"]="ヷ"; h2zd["ｦﾞ"]="ヺ";
}

function utf8han2zen(s_in, i,s,s0,s1,s2,s_out) {
  s_out = "";
  s0    = "";   # Buffer for character which may be followed by a sonant mark
  for (i=1; i<=length(s_in); i++) {
    s = substr(s_in,i,1);
    if (s0 == "") {
      # a. In the case that "s0 buf." has nothing
      if        (s < "\200") {
        # a-1. 1-byte UTF-8 character
        '$kanaonly'if ((s >= "\040") && (s < "\177")) {
        '$kanaonly'  s_out = s_out h2za[s]; # a-1-1, transformable case
        '$kanaonly'} else {
          s_out = s_out s; # a-1-2. intransformable case
        '$kanaonly'}
      } else if (s < "\300") {
        # a-x1. Invalid UTF-8 code
        s_out = s_out s;
      } else if (s < "\340") {
        # a-2. 2-byte UTF-8 character
        i++;
        s_out = s_out s substr(s_in,i,1);
      } else if (s < "\360") {
        # a-3. 3-byte UTF-8 character
        s1 = substr(s_in,i+1,1);
        s2 = substr(s_in,i+2,1);
        # === "Katakana" transforming (halfwidth to fullwidth) =======
        if        (s == "\357") {
          # a-3-1. If the 1st byte is 0xEF
          if        (s1 == "\275") {
            # a-3-1-1. If the 2nd byte is 0xBD
            if        ((s2 >= "\241") && (s2 < "\266")) {
              # a-3-1-1-1. If the 3rd byte is between 0xA1 and 0xB5
              s_out = s_out h2zk[s s1 s2]; # <<< "。「」、・ア...オ(non-vocal)"
            } else if ((s2 >= "\266") && (s2 < "\300")) {
              # a-3-1-1-2. If the 3rd byte is between 0xB6 and 0xBF
              s0 = s s1 s2;                # <<< "カ...ソ(non-vocal or vocal)"
            } else {
              # a-3-1-1-3. If the 3rd byte is except between 0xA1 and 0xBF
              s_out = s_out s s1 s2;
            }
          } else if (s1 == "\276") {
            # a-3-1-2. If the 2nd byte is 0xBE
            if        (((s2 >= "\200") && (s2 < "\205")) ||
                       ((s2 >= "\212") && (s2 < "\217"))   ) {
              # a-3-1-2-1. If the 3rd byte is (0x80-0x84) or (0x8A-0x8E)
              s0 = s s1 s2;            # <<< "タ～ト,ハ～ホ(non-vocal or vocal)"
            } else if ( (s2 >= "\205") && (s2 < "\240")    ) {
              # a-3-1-2-2. If the 3rd byte is (0x85-0x89) or (0x8F-0x9F)
              s_out = s_out h2zk[s s1 s2]; # <<< "ナ～ノ,マ～ン(non-vocal)゛゜"
            } else {
              # a-3-1-2-3. If the 3rd byte is except between 0x80 and 0x9F
              s_out = s_out s s1 s2;
            }
          } else {
            # a-3-1-3. If the 2nd byte is neither 0xBD nor 0xBE
            s_out = s_out s s1 s2;
          }
        } else {
          # a-3-2. If the 1st byte is except 0xEF
          s_out = s_out s s1 s2;
        }
        # ============================================================
        i += 2;
      } else if (s < "\370") {
        # a-4. 4-byte UTF-8 character
        s_out = s_out s substr(s_in,i+1,3);
        i += 3;
      } else if (s < "\374") {
        # a-5. 5-byte UTF-8 character
        s_out = s_out s substr(s_in,i+1,4);
        i += 4;
      } else if (s < "\376") {
        # a-6. 6-byte UTF-8 character
        s_out = s_out s substr(s_in,i+1,5);
        i += 5;
      } else {
        # a-x2. Invalid UTF-8 character
        s_out = s_out s;
      }
    } else {
      # b. In the case that "s0 buf." has anything
      if        (s < "\200") {
        # b-1. 1-byte UTF-8 character
        '$kanaonly'if ((s >= "\040") && (s < "\177")) {
        '$kanaonly'  s_out = s_out h2zk[s0] h2za[s]; # b-1-1. transformable case
        '$kanaonly'} else {
          s_out = s_out h2zk[s0] s; # b-1-2. intransformable case
        '$kanaonly'}
        s0 = "";
      } else if (s < "\300") {
        # b-x1. Invalid UTF-8 character
        s_out = s_out h2zk[s0] s;
        s0 = "";
      } else if (s < "\340") {
        # b-2. 2-byte UTF-8 character
        i++;
        s_out = s_out h2zk[s0] s substr(s_in,i,1);
        s0 = "";
      } else if (s < "\360") {
        # a-3. 3-byte UTF-8 character
        s1 = substr(s_in,i+1,1);
        s2 = substr(s_in,i+2,1);
        # === "Katakana" transforming (halfwidth to fullwidth) =======
        if        (s == "\357") {
          # b-3-1. If the 1st byte is 0xEF
          if        (s1 == "\275") {
            # b-3-1-1. If the 2nd byte is 0xBD
            if        ((s2 >= "\241") && (s2 < "\266")) {
              # b-3-1-1-1. If the 3rd byte is between 0xA1 and 0xB5
              s_out = s_out h2zk[s0] h2zk[s s1 s2]; # <<<"。「」、・ア...オ(nv)"
              s0 = "";
            } else if ((s2 >= "\266") && (s2 < "\300")) {
              # b-3-1-1-2. If the 3rd byte is between 0xB6 and 0xBF
              s_out = s_out h2zk[s0];               # <<< "カ...ソ(nv or v)"
              s0 = s s1 s2;
            } else {
              # b-3-1-1-3. If the 3rd byte is except between 0xA1 and 0xBF
              s_out = s_out h2zk[s0] s s1 s2;
              s0 = "";
            }
          } else if (s1 == "\276") {
            # b-3-1-2. If the 2nd byte is 0xBE
            if         ((s2 == "\236") || (s2 == "\237")   ) {
              # b-3-1-2-1. If the 3rd byte is 0x9E or 0x9F
              s_out = s_out h2zd[s0 s s1 s2];       # <<< sonant marks
              s0 = "";
            } else if (((s2 >= "\200") && (s2 < "\205")) ||
                       ((s2 >= "\212") && (s2 < "\217"))   ) {
              # b-3-1-2-2. If the 3rd byte is (0x80-0x84) or (0x8A-0x8E)
              s_out = s_out h2zk[s0];        # <<< "タ～ト,ハ～ホ(nv or v)"
              s0 = s s1 s2;
            } else if ( (s2 >= "\205") && (s2 < "\236")    ) {
              # b-3-1-2-3. If the 3rd byte is (0x85-0x89) or (0x8F-0x9D)
              s_out = s_out h2zk[s0] h2zk[s s1 s2]; # <<< "ナ～ノ,マ～ン(nv)"
              s0 = "";
            } else {
              # b-3-1-2-4. If the 3rd byte is except between 0x80 and 0x9F
              s_out = s_out h2zk[s0] s s1 s2;
              s0 = "";
            }
          } else {
            # b-3-1-3. If the 2nd byte is neither 0xBD nor 0xBE
            s_out = s_out h2zk[s0] s s1 s2;
            s0 = "";
          }
        } else {
          # b-3-2. If the 1st byte is except 0xEF
          s_out = s_out h2zk[s0] s s1 s2;
          s0 = "";
        }
        # ============================================================
        i += 2;
      } else if (s < "\370") {
        # a-4. 4-byte UTF-8 character
        s_out = s_out h2zk[s0] s substr(s_in,i+1,3);
        s0 = "";
        i += 3;
      } else if (s < "\374") {
        # a-5. 5-byte UTF-8 character
        s_out = s_out h2zk[s0] s substr(s_in,i+1,4);
        s0 = "";
        i += 4;
      } else if (s < "\376") {
        # a-6. 6-byte UTF-8 character
        s_out = s_out h2zk[s0] s substr(s_in,i+1,5);
        s0 = "";
        i += 5;
      } else {
        # a-x2. Invalid UTF-8 character
        s_out = s_out h2zk[s0] s;
        s0 = "";
      }
    }
  }
  if (s0 != "") {
    s_out = s_out h2zk[s0];
  }
  return s_out;
}
'


######################################################################
# Main Routine
######################################################################

if [ $directmode -ne 0 ]; then
  printf '%s' "$directstr"         |
  awk -v hdr_skip=$opth "$awkcode"
else
  (cat "$file"; echo)              |
  awk -v hdr_skip=$opth "$awkcode" |
  awk 'BEGIN{
         ORS="";
         OFS="";
         getline line;
         print line;
         while (getline line) {
           print "\n",line;
         }
       }
     '
fi
